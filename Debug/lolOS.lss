
lolOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b0  00800060  000017d8  0000186c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000006b2  00800110  00800110  0000191c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000194c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000288  00000000  00000000  00001988  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cc2  00000000  00000000  00001c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f8c  00000000  00000000  000048d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a42  00000000  00000000  0000585e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000644  00000000  00000000  000072a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099d  00000000  00000000  000078e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017b8  00000000  00000000  00008281  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e8  00000000  00000000  00009a39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 4f 0a 	jmp	0x149e	; 0x149e <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f7 e1       	ldi	r31, 0x17	; 23
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 31       	cpi	r26, 0x10	; 16
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a0 e1       	ldi	r26, 0x10	; 16
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3c       	cpi	r26, 0xC2	; 194
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a6 09 	call	0x134c	; 0x134c <main>
      8a:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <startScheduler>:
 * Created: 23-Jun-21 
 *  Author: Ahmed Azazy
 */ 
.global startScheduler
startScheduler: 
		cli
      92:	f8 94       	cli
		call getIdle
      94:	0e 94 a6 02 	call	0x54c	; 0x54c <getIdle>
		mov XL , r24
      98:	a8 2f       	mov	r26, r24
		mov XH , r25
      9a:	b9 2f       	mov	r27, r25
		ld r0 , X+
      9c:	0d 90       	ld	r0, X+
		ld r1 , X
      9e:	1c 90       	ld	r1, X
		out 0x3d, r0
      a0:	0d be       	out	0x3d, r0	; 61
		out	0x3e , r1
      a2:	1e be       	out	0x3e, r1	; 62
		pop r31
      a4:	ff 91       	pop	r31
		pop r30
      a6:	ef 91       	pop	r30
		pop r29
      a8:	df 91       	pop	r29
		POP r28
      aa:	cf 91       	pop	r28
		pop r27
      ac:	bf 91       	pop	r27
		pop	r26
      ae:	af 91       	pop	r26
		pop r25
      b0:	9f 91       	pop	r25
		pop r24
      b2:	8f 91       	pop	r24
		pop r23
      b4:	7f 91       	pop	r23
		pop r22
      b6:	6f 91       	pop	r22
		pop r21
      b8:	5f 91       	pop	r21
		pop	r20
      ba:	4f 91       	pop	r20
		pop	r19
      bc:	3f 91       	pop	r19
		pop	r18
      be:	2f 91       	pop	r18
		pop r17
      c0:	1f 91       	pop	r17
		pop r16
      c2:	0f 91       	pop	r16
		pop r15
      c4:	ff 90       	pop	r15
		pop r14
      c6:	ef 90       	pop	r14
		pop r13
      c8:	df 90       	pop	r13
		pop r12
      ca:	cf 90       	pop	r12
		pop r11
      cc:	bf 90       	pop	r11
		pop r10
      ce:	af 90       	pop	r10
		pop r9
      d0:	9f 90       	pop	r9
		pop r8
      d2:	8f 90       	pop	r8
		pop r7
      d4:	7f 90       	pop	r7
		pop r6
      d6:	6f 90       	pop	r6
		pop r5
      d8:	5f 90       	pop	r5
		pop r4
      da:	4f 90       	pop	r4
		pop r3
      dc:	3f 90       	pop	r3
		pop r2
      de:	2f 90       	pop	r2
		pop r1
      e0:	1f 90       	pop	r1
		pop r0
      e2:	0f 90       	pop	r0
		out 0x3f , r0
      e4:	0f be       	out	0x3f, r0	; 63
		pop r0 
      e6:	0f 90       	pop	r0
		sei
      e8:	78 94       	sei
        ret
      ea:	08 95       	ret

000000ec <LCD_Command>:
#define F_CPU 8000000UL
#include "application.h"
#include <util/delay.h>
void LCD_Command( unsigned char cmnd )
{
	LCD_Port = (LCD_Port & 0x0F) | (cmnd & 0xF0); /* sending upper nibble */
      ec:	98 b3       	in	r25, 0x18	; 24
      ee:	9f 70       	andi	r25, 0x0F	; 15
      f0:	28 2f       	mov	r18, r24
      f2:	20 7f       	andi	r18, 0xF0	; 240
      f4:	92 2b       	or	r25, r18
      f6:	98 bb       	out	0x18, r25	; 24
	LCD_Port &= ~ (1<<RS);		/* RS=0, command reg. */
      f8:	c0 98       	cbi	0x18, 0	; 24
	LCD_Port |= (1<<EN);		/* Enable pulse */
      fa:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fc:	32 e0       	ldi	r19, 0x02	; 2
      fe:	3a 95       	dec	r19
     100:	f1 f7       	brne	.-4      	; 0xfe <LCD_Command+0x12>
     102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_Command+0x18>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     104:	c1 98       	cbi	0x18, 1	; 24
     106:	ef e8       	ldi	r30, 0x8F	; 143
     108:	f1 e0       	ldi	r31, 0x01	; 1
     10a:	31 97       	sbiw	r30, 0x01	; 1
     10c:	f1 f7       	brne	.-4      	; 0x10a <LCD_Command+0x1e>
     10e:	00 c0       	rjmp	.+0      	; 0x110 <LCD_Command+0x24>
     110:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (cmnd << 4);  /* sending lower nibble */
     112:	28 b3       	in	r18, 0x18	; 24
     114:	2f 70       	andi	r18, 0x0F	; 15
     116:	f0 e1       	ldi	r31, 0x10	; 16
     118:	8f 9f       	mul	r24, r31
     11a:	c0 01       	movw	r24, r0
     11c:	11 24       	eor	r1, r1
     11e:	82 2b       	or	r24, r18
     120:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
     122:	c1 9a       	sbi	0x18, 1	; 24
     124:	32 e0       	ldi	r19, 0x02	; 2
     126:	3a 95       	dec	r19
     128:	f1 f7       	brne	.-4      	; 0x126 <LCD_Command+0x3a>
     12a:	00 c0       	rjmp	.+0      	; 0x12c <LCD_Command+0x40>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     12c:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12e:	8f e9       	ldi	r24, 0x9F	; 159
     130:	9f e0       	ldi	r25, 0x0F	; 15
     132:	01 97       	sbiw	r24, 0x01	; 1
     134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Command+0x46>
     136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Command+0x4c>
     138:	00 00       	nop
     13a:	08 95       	ret

0000013c <LCD_Char>:
}


void LCD_Char( unsigned char data )
{
	LCD_Port = (LCD_Port & 0x0F) | (data & 0xF0); /* sending upper nibble */
     13c:	98 b3       	in	r25, 0x18	; 24
     13e:	9f 70       	andi	r25, 0x0F	; 15
     140:	28 2f       	mov	r18, r24
     142:	20 7f       	andi	r18, 0xF0	; 240
     144:	92 2b       	or	r25, r18
     146:	98 bb       	out	0x18, r25	; 24
	LCD_Port |= (1<<RS);		/* RS=1, data reg. */
     148:	c0 9a       	sbi	0x18, 0	; 24
	LCD_Port|= (1<<EN);
     14a:	c1 9a       	sbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     14c:	32 e0       	ldi	r19, 0x02	; 2
     14e:	3a 95       	dec	r19
     150:	f1 f7       	brne	.-4      	; 0x14e <LCD_Char+0x12>
     152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_Char+0x18>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     154:	c1 98       	cbi	0x18, 1	; 24
     156:	ef e8       	ldi	r30, 0x8F	; 143
     158:	f1 e0       	ldi	r31, 0x01	; 1
     15a:	31 97       	sbiw	r30, 0x01	; 1
     15c:	f1 f7       	brne	.-4      	; 0x15a <LCD_Char+0x1e>
     15e:	00 c0       	rjmp	.+0      	; 0x160 <LCD_Char+0x24>
     160:	00 00       	nop

	_delay_us(200);

	LCD_Port = (LCD_Port & 0x0F) | (data << 4); /* sending lower nibble */
     162:	28 b3       	in	r18, 0x18	; 24
     164:	2f 70       	andi	r18, 0x0F	; 15
     166:	f0 e1       	ldi	r31, 0x10	; 16
     168:	8f 9f       	mul	r24, r31
     16a:	c0 01       	movw	r24, r0
     16c:	11 24       	eor	r1, r1
     16e:	82 2b       	or	r24, r18
     170:	88 bb       	out	0x18, r24	; 24
	LCD_Port |= (1<<EN);
     172:	c1 9a       	sbi	0x18, 1	; 24
     174:	32 e0       	ldi	r19, 0x02	; 2
     176:	3a 95       	dec	r19
     178:	f1 f7       	brne	.-4      	; 0x176 <LCD_Char+0x3a>
     17a:	00 c0       	rjmp	.+0      	; 0x17c <LCD_Char+0x40>
	_delay_us(1);
	LCD_Port &= ~ (1<<EN);
     17c:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     17e:	8f e9       	ldi	r24, 0x9F	; 159
     180:	9f e0       	ldi	r25, 0x0F	; 15
     182:	01 97       	sbiw	r24, 0x01	; 1
     184:	f1 f7       	brne	.-4      	; 0x182 <LCD_Char+0x46>
     186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_Char+0x4c>
     188:	00 00       	nop
     18a:	08 95       	ret

0000018c <LCD_Init>:
	_delay_ms(2);
}

void LCD_Init (void)			/* LCD Initialize function */
{
	LCD_Dir = 0xFF;			/* Make LCD port direction as o/p */
     18c:	8f ef       	ldi	r24, 0xFF	; 255
     18e:	87 bb       	out	0x17, r24	; 23
     190:	8f e3       	ldi	r24, 0x3F	; 63
     192:	9c e9       	ldi	r25, 0x9C	; 156
     194:	01 97       	sbiw	r24, 0x01	; 1
     196:	f1 f7       	brne	.-4      	; 0x194 <LCD_Init+0x8>
     198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_Init+0xe>
     19a:	00 00       	nop
	_delay_ms(20);			/* LCD Power ON delay always >15ms */
	
	LCD_Command(0x02);		/* send for 4 bit initialization of LCD  */
     19c:	82 e0       	ldi	r24, 0x02	; 2
     19e:	0e 94 76 00 	call	0xec	; 0xec <LCD_Command>
	LCD_Command(0x28);              /* 2 line, 5*7 matrix in 4-bit mode */
     1a2:	88 e2       	ldi	r24, 0x28	; 40
     1a4:	0e 94 76 00 	call	0xec	; 0xec <LCD_Command>
	LCD_Command(0x0c);              /* Display on cursor off*/
     1a8:	8c e0       	ldi	r24, 0x0C	; 12
     1aa:	0e 94 76 00 	call	0xec	; 0xec <LCD_Command>
	LCD_Command(0x06);              /* Increment cursor (shift cursor to right)*/
     1ae:	86 e0       	ldi	r24, 0x06	; 6
     1b0:	0e 94 76 00 	call	0xec	; 0xec <LCD_Command>
	LCD_Command(0x01);              /* Clear display screen*/
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	0e 94 76 00 	call	0xec	; 0xec <LCD_Command>
     1ba:	8f e9       	ldi	r24, 0x9F	; 159
     1bc:	9f e0       	ldi	r25, 0x0F	; 15
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD_Init+0x32>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_Init+0x38>
     1c4:	00 00       	nop
     1c6:	08 95       	ret

000001c8 <LCD_String>:
	_delay_ms(2);
}


void LCD_String (char *str)		/* Send string to LCD function */
{
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	ec 01       	movw	r28, r24
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     1ce:	88 81       	ld	r24, Y
     1d0:	88 23       	and	r24, r24
     1d2:	31 f0       	breq	.+12     	; 0x1e0 <LCD_String+0x18>
     1d4:	21 96       	adiw	r28, 0x01	; 1
	{
		LCD_Char (str[i]);
     1d6:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Char>


void LCD_String (char *str)		/* Send string to LCD function */
{
	int i;
	for(i=0;str[i]!=0;i++)		/* Send each char of string till the NULL */
     1da:	89 91       	ld	r24, Y+
     1dc:	81 11       	cpse	r24, r1
     1de:	fb cf       	rjmp	.-10     	; 0x1d6 <LCD_String+0xe>
	{
		LCD_Char (str[i]);
	}
}
     1e0:	df 91       	pop	r29
     1e2:	cf 91       	pop	r28
     1e4:	08 95       	ret

000001e6 <listInit>:
list_t readyList[PRIORITY_NUM];
uint64_t ticks=0;
list_t timerList;

void listInit(list_t * pList)
	{
     1e6:	fc 01       	movw	r30, r24
		pList->pIndex = &pList->End;
     1e8:	02 96       	adiw	r24, 0x02	; 2
     1ea:	91 83       	std	Z+1, r25	; 0x01
     1ec:	80 83       	st	Z, r24
		pList->End.pList = pList;
     1ee:	f7 83       	std	Z+7, r31	; 0x07
     1f0:	e6 83       	std	Z+6, r30	; 0x06
		pList->End.pNext = &pList->End;
     1f2:	93 83       	std	Z+3, r25	; 0x03
     1f4:	82 83       	std	Z+2, r24	; 0x02
		pList->End.pPrev = &pList->End;
     1f6:	95 83       	std	Z+5, r25	; 0x05
     1f8:	84 83       	std	Z+4, r24	; 0x04
		pList->End.pTCB = NULL;
     1fa:	11 86       	std	Z+9, r1	; 0x09
     1fc:	10 86       	std	Z+8, r1	; 0x08
		pList->pIndex = &pList->End;
		pList->numOfItems = 0;
     1fe:	12 8a       	std	Z+18, r1	; 0x12
     200:	08 95       	ret

00000202 <OS_listInit>:
	}
	
void OS_listInit(void )
	{
     202:	0f 93       	push	r16
     204:	1f 93       	push	r17
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
     20a:	c8 e1       	ldi	r28, 0x18	; 24
     20c:	d1 e0       	ldi	r29, 0x01	; 1
     20e:	06 ed       	ldi	r16, 0xD6	; 214
     210:	11 e0       	ldi	r17, 0x01	; 1
		for(uint8_t i = 0 ; i < PRIORITY_NUM  ; i++)
			{
				listInit(&readyList[i]);
     212:	ce 01       	movw	r24, r28
     214:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <listInit>
     218:	63 96       	adiw	r28, 0x13	; 19
		pList->numOfItems = 0;
	}
	
void OS_listInit(void )
	{
		for(uint8_t i = 0 ; i < PRIORITY_NUM  ; i++)
     21a:	c0 17       	cp	r28, r16
     21c:	d1 07       	cpc	r29, r17
     21e:	c9 f7       	brne	.-14     	; 0x212 <OS_listInit+0x10>
			{
				listInit(&readyList[i]);
			}
	}
     220:	df 91       	pop	r29
     222:	cf 91       	pop	r28
     224:	1f 91       	pop	r17
     226:	0f 91       	pop	r16
     228:	08 95       	ret

0000022a <addToReady>:
	
void addToReady(item_t * pItem )
{
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	dc 01       	movw	r26, r24
	list_t *pList = pItem->pList;
     230:	14 96       	adiw	r26, 0x04	; 4
     232:	ed 91       	ld	r30, X+
     234:	fc 91       	ld	r31, X
     236:	15 97       	sbiw	r26, 0x05	; 5
	item_t *addTo = pList->End.pPrev;
     238:	c4 81       	ldd	r28, Z+4	; 0x04
     23a:	d5 81       	ldd	r29, Z+5	; 0x05
	addTo->pNext = pItem;
     23c:	99 83       	std	Y+1, r25	; 0x01
     23e:	88 83       	st	Y, r24
	pItem->pNext = &pList->End;
     240:	cf 01       	movw	r24, r30
     242:	02 96       	adiw	r24, 0x02	; 2
     244:	11 96       	adiw	r26, 0x01	; 1
     246:	9c 93       	st	X, r25
     248:	8e 93       	st	-X, r24
	pList->End.pPrev = pItem;
     24a:	b5 83       	std	Z+5, r27	; 0x05
     24c:	a4 83       	std	Z+4, r26	; 0x04
	pItem->pPrev = addTo;
     24e:	13 96       	adiw	r26, 0x03	; 3
     250:	dc 93       	st	X, r29
     252:	ce 93       	st	-X, r28
     254:	12 97       	sbiw	r26, 0x02	; 2
	
	pList->numOfItems++;
     256:	82 89       	ldd	r24, Z+18	; 0x12
     258:	8f 5f       	subi	r24, 0xFF	; 255
     25a:	82 8b       	std	Z+18, r24	; 0x12
}
     25c:	df 91       	pop	r29
     25e:	cf 91       	pop	r28
     260:	08 95       	ret

00000262 <timerListInit>:

void timerListInit(void )
{
	timerList.pIndex = &timerList.End;
     262:	e6 ed       	ldi	r30, 0xD6	; 214
     264:	f1 e0       	ldi	r31, 0x01	; 1
     266:	88 ed       	ldi	r24, 0xD8	; 216
     268:	91 e0       	ldi	r25, 0x01	; 1
     26a:	91 83       	std	Z+1, r25	; 0x01
     26c:	80 83       	st	Z, r24
	timerList.End.pList = &timerList;
     26e:	f7 83       	std	Z+7, r31	; 0x07
     270:	e6 83       	std	Z+6, r30	; 0x06
	timerList.End.pNext = &timerList.End;
     272:	93 83       	std	Z+3, r25	; 0x03
     274:	82 83       	std	Z+2, r24	; 0x02
	timerList.End.pPrev = &timerList.End;
     276:	95 83       	std	Z+5, r25	; 0x05
     278:	84 83       	std	Z+4, r24	; 0x04
	timerList.End.pTCB = NULL;
     27a:	11 86       	std	Z+9, r1	; 0x09
     27c:	10 86       	std	Z+8, r1	; 0x08
	timerList.End.timerDelay = 0xFFFFFFFFFFFFFFFF;
     27e:	8f ef       	ldi	r24, 0xFF	; 255
     280:	82 87       	std	Z+10, r24	; 0x0a
     282:	83 87       	std	Z+11, r24	; 0x0b
     284:	84 87       	std	Z+12, r24	; 0x0c
     286:	85 87       	std	Z+13, r24	; 0x0d
     288:	86 87       	std	Z+14, r24	; 0x0e
     28a:	87 87       	std	Z+15, r24	; 0x0f
     28c:	80 8b       	std	Z+16, r24	; 0x10
     28e:	81 8b       	std	Z+17, r24	; 0x11
	timerList.numOfItems = 0;
     290:	12 8a       	std	Z+18, r1	; 0x12
     292:	08 95       	ret

00000294 <mutexCreate>:

#include "os.h"
#include <stdlib.h>

void mutexCreate(mutex_t *mutex , uint8_t initialValue)
	{
     294:	bf 92       	push	r11
     296:	cf 92       	push	r12
     298:	df 92       	push	r13
     29a:	ef 92       	push	r14
     29c:	ff 92       	push	r15
     29e:	0f 93       	push	r16
     2a0:	1f 93       	push	r17
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	6c 01       	movw	r12, r24
     2a8:	b6 2e       	mov	r11, r22
     2aa:	8c 01       	movw	r16, r24
     2ac:	ec 01       	movw	r28, r24
     2ae:	64 96       	adiw	r28, 0x14	; 20
     2b0:	7c 01       	movw	r14, r24
     2b2:	8e e1       	ldi	r24, 0x1E	; 30
     2b4:	e8 0e       	add	r14, r24
     2b6:	f1 1c       	adc	r15, r1
		for(int i = 0 ; i < PRIORITY_NUM ; i++)
		{
		mutex->waitQueue[i] = malloc(sizeof(eventItem_t * ) * 10 );
     2b8:	84 e1       	ldi	r24, 0x14	; 20
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 c9 0a 	call	0x1592	; 0x1592 <malloc>
     2c0:	f8 01       	movw	r30, r16
     2c2:	81 93       	st	Z+, r24
     2c4:	91 93       	st	Z+, r25
     2c6:	8f 01       	movw	r16, r30
		mutex->head[i] = 0;
     2c8:	19 92       	st	Y+, r1
		mutex->tail[i] = 0;
     2ca:	19 86       	std	Y+9, r1	; 0x09
		mutex->numOfWaitingItems[i] = 0;			
     2cc:	1c 8a       	std	Y+20, r1	; 0x14
#include "os.h"
#include <stdlib.h>

void mutexCreate(mutex_t *mutex , uint8_t initialValue)
	{
		for(int i = 0 ; i < PRIORITY_NUM ; i++)
     2ce:	ce 15       	cp	r28, r14
     2d0:	df 05       	cpc	r29, r15
     2d2:	91 f7       	brne	.-28     	; 0x2b8 <mutexCreate+0x24>
		mutex->waitQueue[i] = malloc(sizeof(eventItem_t * ) * 10 );
		mutex->head[i] = 0;
		mutex->tail[i] = 0;
		mutex->numOfWaitingItems[i] = 0;			
		}
		mutex->value = 	initialValue;
     2d4:	f6 01       	movw	r30, r12
     2d6:	b0 a6       	std	Z+40, r11	; 0x28
	}
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	df 90       	pop	r13
     2e6:	cf 90       	pop	r12
     2e8:	bf 90       	pop	r11
     2ea:	08 95       	ret

000002ec <mutexEnqueue>:
			return FAIL;
	}


void mutexEnqueue(mutex_t * mutex ,eventItem_t * item)
	{
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	fc 01       	movw	r30, r24
		uint8_t priority = item->pTCB->priority;
     2f2:	eb 01       	movw	r28, r22
     2f4:	a9 81       	ldd	r26, Y+1	; 0x01
     2f6:	ba 81       	ldd	r27, Y+2	; 0x02
		if(mutex->numOfWaitingItems[priority] == 0)
     2f8:	12 96       	adiw	r26, 0x02	; 2
     2fa:	9c 91       	ld	r25, X
     2fc:	29 2f       	mov	r18, r25
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	df 01       	movw	r26, r30
     302:	a2 0f       	add	r26, r18
     304:	b3 1f       	adc	r27, r19
     306:	99 96       	adiw	r26, 0x29	; 41
     308:	9c 91       	ld	r25, X
     30a:	91 11       	cpse	r25, r1
     30c:	12 c0       	rjmp	.+36     	; 0x332 <mutexEnqueue+0x46>
			{
				mutex->waitQueue[priority][0] = item;
     30e:	d9 01       	movw	r26, r18
     310:	aa 0f       	add	r26, r26
     312:	bb 1f       	adc	r27, r27
     314:	ae 0f       	add	r26, r30
     316:	bf 1f       	adc	r27, r31
     318:	0d 90       	ld	r0, X+
     31a:	bc 91       	ld	r27, X
     31c:	a0 2d       	mov	r26, r0
     31e:	6d 93       	st	X+, r22
     320:	7c 93       	st	X, r23
				mutex->head[priority] = 0;
     322:	e2 0f       	add	r30, r18
     324:	f3 1f       	adc	r31, r19
     326:	14 8a       	std	Z+20, r1	; 0x14
				mutex->tail[priority] = 0;
     328:	16 8e       	std	Z+30, r1	; 0x1e
				mutex->numOfWaitingItems[priority]++;
     32a:	81 a5       	ldd	r24, Z+41	; 0x29
     32c:	8f 5f       	subi	r24, 0xFF	; 255
     32e:	81 a7       	std	Z+41, r24	; 0x29
     330:	29 c0       	rjmp	.+82     	; 0x384 <mutexEnqueue+0x98>
			}
			
			else if(mutex->numOfWaitingItems[priority] < 10)
     332:	9a 30       	cpi	r25, 0x0A	; 10
     334:	38 f5       	brcc	.+78     	; 0x384 <mutexEnqueue+0x98>
			{
				mutex->tail[priority]++;
     336:	df 01       	movw	r26, r30
     338:	a2 0f       	add	r26, r18
     33a:	b3 1f       	adc	r27, r19
     33c:	5e 96       	adiw	r26, 0x1e	; 30
     33e:	8c 91       	ld	r24, X
     340:	8f 5f       	subi	r24, 0xFF	; 255
				if(mutex->tail[priority] > 9 )
     342:	8a 30       	cpi	r24, 0x0A	; 10
     344:	30 f4       	brcc	.+12     	; 0x352 <mutexEnqueue+0x66>
				mutex->numOfWaitingItems[priority]++;
			}
			
			else if(mutex->numOfWaitingItems[priority] < 10)
			{
				mutex->tail[priority]++;
     346:	df 01       	movw	r26, r30
     348:	a2 0f       	add	r26, r18
     34a:	b3 1f       	adc	r27, r19
     34c:	5e 96       	adiw	r26, 0x1e	; 30
     34e:	8c 93       	st	X, r24
     350:	05 c0       	rjmp	.+10     	; 0x35c <mutexEnqueue+0x70>
				if(mutex->tail[priority] > 9 )
					mutex->tail[priority] = 0;
     352:	df 01       	movw	r26, r30
     354:	a2 0f       	add	r26, r18
     356:	b3 1f       	adc	r27, r19
     358:	5e 96       	adiw	r26, 0x1e	; 30
     35a:	1c 92       	st	X, r1
				
				mutex->waitQueue[priority][mutex->tail[priority]] = item;
     35c:	e9 01       	movw	r28, r18
     35e:	cc 0f       	add	r28, r28
     360:	dd 1f       	adc	r29, r29
     362:	ce 0f       	add	r28, r30
     364:	df 1f       	adc	r29, r31
     366:	e2 0f       	add	r30, r18
     368:	f3 1f       	adc	r31, r19
     36a:	a6 8d       	ldd	r26, Z+30	; 0x1e
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	aa 0f       	add	r26, r26
     370:	bb 1f       	adc	r27, r27
     372:	88 81       	ld	r24, Y
     374:	99 81       	ldd	r25, Y+1	; 0x01
     376:	a8 0f       	add	r26, r24
     378:	b9 1f       	adc	r27, r25
     37a:	6d 93       	st	X+, r22
     37c:	7c 93       	st	X, r23
				mutex->numOfWaitingItems[priority]++;
     37e:	81 a5       	ldd	r24, Z+41	; 0x29
     380:	8f 5f       	subi	r24, 0xFF	; 255
     382:	81 a7       	std	Z+41, r24	; 0x29
			else 
			{
				return ;
			}
			
	}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	08 95       	ret

0000038a <mutexTake>:
		}
		mutex->value = 	initialValue;
	}
	
status_t mutexTake(mutex_t * mutex , uint64_t delayTime)
	{
     38a:	af 92       	push	r10
     38c:	bf 92       	push	r11
     38e:	cf 92       	push	r12
     390:	df 92       	push	r13
     392:	ef 92       	push	r14
     394:	ff 92       	push	r15
     396:	0f 93       	push	r16
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	fc 01       	movw	r30, r24
		cli();
     3a0:	f8 94       	cli
		if(mutex->value > 0)
     3a2:	90 a5       	ldd	r25, Z+40	; 0x28
     3a4:	99 23       	and	r25, r25
     3a6:	29 f0       	breq	.+10     	; 0x3b2 <mutexTake+0x28>
			{
				mutex->value--;
     3a8:	91 50       	subi	r25, 0x01	; 1
     3aa:	90 a7       	std	Z+40, r25	; 0x28
				sei();
     3ac:	78 94       	sei
				return PASS;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	27 c0       	rjmp	.+78     	; 0x400 <__LOCK_REGION_LENGTH__>
     3b2:	f7 2e       	mov	r15, r23
     3b4:	e6 2e       	mov	r14, r22
     3b6:	d5 2e       	mov	r13, r21
     3b8:	c4 2e       	mov	r12, r20
     3ba:	b3 2e       	mov	r11, r19
     3bc:	a2 2e       	mov	r10, r18
     3be:	ef 01       	movw	r28, r30
			}
			
			else 
			{
				mutexEnqueue(mutex , &pRunning->pTCB->event );
     3c0:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <pRunning>
     3c4:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <pRunning+0x1>
     3c8:	66 81       	ldd	r22, Z+6	; 0x06
     3ca:	77 81       	ldd	r23, Z+7	; 0x07
     3cc:	6d 5e       	subi	r22, 0xED	; 237
     3ce:	7f 4f       	sbci	r23, 0xFF	; 255
     3d0:	ce 01       	movw	r24, r28
     3d2:	0e 94 76 01 	call	0x2ec	; 0x2ec <mutexEnqueue>
				taskDelay(NULL , delayTime);
     3d6:	2a 2d       	mov	r18, r10
     3d8:	3b 2d       	mov	r19, r11
     3da:	4c 2d       	mov	r20, r12
     3dc:	5d 2d       	mov	r21, r13
     3de:	6e 2d       	mov	r22, r14
     3e0:	7f 2d       	mov	r23, r15
     3e2:	80 e0       	ldi	r24, 0x00	; 0
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 f5 05 	call	0xbea	; 0xbea <taskDelay>
			}
			
			cli();
     3ea:	f8 94       	cli
			if(mutex->value > 0)
     3ec:	88 a5       	ldd	r24, Y+40	; 0x28
     3ee:	88 23       	and	r24, r24
     3f0:	29 f0       	breq	.+10     	; 0x3fc <mutexTake+0x72>
				{
					mutex->value--;
     3f2:	81 50       	subi	r24, 0x01	; 1
     3f4:	88 a7       	std	Y+40, r24	; 0x28
					sei();
     3f6:	78 94       	sei
					return PASS;
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	02 c0       	rjmp	.+4      	; 0x400 <__LOCK_REGION_LENGTH__>
				}
			sei();
     3fc:	78 94       	sei
			return FAIL;
     3fe:	80 e0       	ldi	r24, 0x00	; 0
	}
     400:	df 91       	pop	r29
     402:	cf 91       	pop	r28
     404:	1f 91       	pop	r17
     406:	0f 91       	pop	r16
     408:	ff 90       	pop	r15
     40a:	ef 90       	pop	r14
     40c:	df 90       	pop	r13
     40e:	cf 90       	pop	r12
     410:	bf 90       	pop	r11
     412:	af 90       	pop	r10
     414:	08 95       	ret

00000416 <mutexDequeue>:
			}
			
	}

eventItem_t * mutexDequeue(mutex_t * mutex)
{
     416:	fc 01       	movw	r30, r24
	for(int i = 0 ; i < PRIORITY_NUM ; i++)
	{
	if(mutex->numOfWaitingItems[i] > 0)
     418:	91 a5       	ldd	r25, Z+41	; 0x29
     41a:	91 11       	cpse	r25, r1
     41c:	08 c0       	rjmp	.+16     	; 0x42e <mutexDequeue+0x18>
     41e:	df 01       	movw	r26, r30
     420:	9a 96       	adiw	r26, 0x2a	; 42
			
	}

eventItem_t * mutexDequeue(mutex_t * mutex)
{
	for(int i = 0 ; i < PRIORITY_NUM ; i++)
     422:	21 e0       	ldi	r18, 0x01	; 1
     424:	30 e0       	ldi	r19, 0x00	; 0
	{
	if(mutex->numOfWaitingItems[i] > 0)
     426:	9d 91       	ld	r25, X+
     428:	99 23       	and	r25, r25
     42a:	81 f1       	breq	.+96     	; 0x48c <mutexDequeue+0x76>
     42c:	02 c0       	rjmp	.+4      	; 0x432 <mutexDequeue+0x1c>
			
	}

eventItem_t * mutexDequeue(mutex_t * mutex)
{
	for(int i = 0 ; i < PRIORITY_NUM ; i++)
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
	{
	if(mutex->numOfWaitingItems[i] > 0)
	{
		uint8_t temp = mutex->head[i];
     432:	df 01       	movw	r26, r30
     434:	a2 0f       	add	r26, r18
     436:	b3 1f       	adc	r27, r19
     438:	54 96       	adiw	r26, 0x14	; 20
     43a:	8c 91       	ld	r24, X
		mutex->head[i] = mutex->head[i] + 1;
     43c:	41 e0       	ldi	r20, 0x01	; 1
     43e:	48 0f       	add	r20, r24
		if(mutex->head[i] > 9)
     440:	4a 30       	cpi	r20, 0x0A	; 10
     442:	30 f4       	brcc	.+12     	; 0x450 <mutexDequeue+0x3a>
	for(int i = 0 ; i < PRIORITY_NUM ; i++)
	{
	if(mutex->numOfWaitingItems[i] > 0)
	{
		uint8_t temp = mutex->head[i];
		mutex->head[i] = mutex->head[i] + 1;
     444:	df 01       	movw	r26, r30
     446:	a2 0f       	add	r26, r18
     448:	b3 1f       	adc	r27, r19
     44a:	54 96       	adiw	r26, 0x14	; 20
     44c:	4c 93       	st	X, r20
     44e:	05 c0       	rjmp	.+10     	; 0x45a <mutexDequeue+0x44>
		if(mutex->head[i] > 9)
		mutex->head[i] = 0;
     450:	df 01       	movw	r26, r30
     452:	a2 0f       	add	r26, r18
     454:	b3 1f       	adc	r27, r19
     456:	54 96       	adiw	r26, 0x14	; 20
     458:	1c 92       	st	X, r1
		
		mutex->numOfWaitingItems[i]--;
     45a:	df 01       	movw	r26, r30
     45c:	a2 0f       	add	r26, r18
     45e:	b3 1f       	adc	r27, r19
     460:	91 50       	subi	r25, 0x01	; 1
     462:	99 96       	adiw	r26, 0x29	; 41
     464:	9c 93       	st	X, r25
		eventItem_t * item = mutex->waitQueue[i][temp];
     466:	22 0f       	add	r18, r18
     468:	33 1f       	adc	r19, r19
     46a:	e2 0f       	add	r30, r18
     46c:	f3 1f       	adc	r31, r19
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	88 0f       	add	r24, r24
     472:	99 1f       	adc	r25, r25
     474:	01 90       	ld	r0, Z+
     476:	f0 81       	ld	r31, Z
     478:	e0 2d       	mov	r30, r0
     47a:	e8 0f       	add	r30, r24
     47c:	f9 1f       	adc	r31, r25
     47e:	01 90       	ld	r0, Z+
     480:	f0 81       	ld	r31, Z
     482:	e0 2d       	mov	r30, r0
		item->queueIndex = 0;
     484:	10 82       	st	Z, r1
		return item;
     486:	8e 2f       	mov	r24, r30
     488:	9f 2f       	mov	r25, r31
     48a:	08 95       	ret
			
	}

eventItem_t * mutexDequeue(mutex_t * mutex)
{
	for(int i = 0 ; i < PRIORITY_NUM ; i++)
     48c:	2f 5f       	subi	r18, 0xFF	; 255
     48e:	3f 4f       	sbci	r19, 0xFF	; 255
     490:	2a 30       	cpi	r18, 0x0A	; 10
     492:	31 05       	cpc	r19, r1
     494:	41 f6       	brne	.-112    	; 0x426 <mutexDequeue+0x10>
		eventItem_t * item = mutex->waitQueue[i][temp];
		item->queueIndex = 0;
		return item;
	}		
	}		
		return NULL;
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
}
     49a:	08 95       	ret

0000049c <mutexRelease>:

void mutexRelease(mutex_t * mutex)
	{
     49c:	cf 93       	push	r28
     49e:	df 93       	push	r29
		cli();
     4a0:	f8 94       	cli
		mutex->value ++;
     4a2:	fc 01       	movw	r30, r24
     4a4:	20 a5       	ldd	r18, Z+40	; 0x28
     4a6:	2f 5f       	subi	r18, 0xFF	; 255
     4a8:	20 a7       	std	Z+40, r18	; 0x28
		eventItem_t * item = mutexDequeue(mutex);
     4aa:	0e 94 0b 02 	call	0x416	; 0x416 <mutexDequeue>
     4ae:	ec 01       	movw	r28, r24
		if(item != NULL)
     4b0:	89 2b       	or	r24, r25
     4b2:	71 f0       	breq	.+28     	; 0x4d0 <mutexRelease+0x34>
		{
			
		if(item->pTCB->TCB_Item.pList == &timerList)
     4b4:	e9 81       	ldd	r30, Y+1	; 0x01
     4b6:	fa 81       	ldd	r31, Y+2	; 0x02
     4b8:	87 81       	ldd	r24, Z+7	; 0x07
     4ba:	90 85       	ldd	r25, Z+8	; 0x08
     4bc:	86 5d       	subi	r24, 0xD6	; 214
     4be:	91 40       	sbci	r25, 0x01	; 1
     4c0:	39 f4       	brne	.+14     	; 0x4d0 <mutexRelease+0x34>
		{
			taskDelete(item->pTCB);
     4c2:	cf 01       	movw	r24, r30
     4c4:	0e 94 ef 04 	call	0x9de	; 0x9de <taskDelete>
			taskAddToReady(item->pTCB);
     4c8:	89 81       	ldd	r24, Y+1	; 0x01
     4ca:	9a 81       	ldd	r25, Y+2	; 0x02
     4cc:	0e 94 25 05 	call	0xa4a	; 0xa4a <taskAddToReady>
		}
		}
		sei();
     4d0:	78 94       	sei
     4d2:	df 91       	pop	r29
     4d4:	cf 91       	pop	r28
     4d6:	08 95       	ret

000004d8 <idleTask>:
uint64_t idletest;
stack_t idleStack;
TaskTCB_t idleTCB;
extern item_t * pRunning;
void idleTask(void )
{
     4d8:	32 e3       	ldi	r19, 0x32	; 50
	while(1)
	{
		for(idletest = 0 ; idletest < LOOP ; idletest++);
			PORTA^=(1<<4);
     4da:	20 e1       	ldi	r18, 0x10	; 16
uint64_t idletest;
stack_t idleStack;
TaskTCB_t idleTCB;
extern item_t * pRunning;
void idleTask(void )
{
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	01 96       	adiw	r24, 0x01	; 1
	while(1)
	{
		for(idletest = 0 ; idletest < LOOP ; idletest++);
     4e2:	82 33       	cpi	r24, 0x32	; 50
     4e4:	91 05       	cpc	r25, r1
     4e6:	e1 f7       	brne	.-8      	; 0x4e0 <idleTask+0x8>
     4e8:	30 93 4c 02 	sts	0x024C, r19	; 0x80024c <idletest>
     4ec:	10 92 4d 02 	sts	0x024D, r1	; 0x80024d <idletest+0x1>
     4f0:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <idletest+0x2>
     4f4:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <idletest+0x3>
     4f8:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <idletest+0x4>
     4fc:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <idletest+0x5>
     500:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <idletest+0x6>
     504:	10 92 53 02 	sts	0x0253, r1	; 0x800253 <idletest+0x7>
			PORTA^=(1<<4);
     508:	8b b3       	in	r24, 0x1b	; 27
     50a:	82 27       	eor	r24, r18
     50c:	8b bb       	out	0x1b, r24	; 27
	}
     50e:	e6 cf       	rjmp	.-52     	; 0x4dc <idleTask+0x4>

00000510 <osInit>:
}

void osInit(uint8_t ms )
{
     510:	cf 93       	push	r28
     512:	c8 2f       	mov	r28, r24
	OS_listInit();
     514:	0e 94 01 01 	call	0x202	; 0x202 <OS_listInit>
	ThreadCreate(idleTask , &idleTCB , idleStack , 4);
     518:	24 e0       	ldi	r18, 0x04	; 4
     51a:	44 e5       	ldi	r20, 0x54	; 84
     51c:	52 e0       	ldi	r21, 0x02	; 2
     51e:	66 e3       	ldi	r22, 0x36	; 54
     520:	72 e0       	ldi	r23, 0x02	; 2
     522:	8c e6       	ldi	r24, 0x6C	; 108
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	0e 94 55 04 	call	0x8aa	; 0x8aa <ThreadCreate>
	readyList[4].numOfItems = 0;
     52a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <readyList+0x5e>
	pRunning = &idleTCB.TCB_Item;
     52e:	89 e3       	ldi	r24, 0x39	; 57
     530:	92 e0       	ldi	r25, 0x02	; 2
     532:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <pRunning+0x1>
     536:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <pRunning>
	softwareTimers_Init();
     53a:	0e 94 a9 02 	call	0x552	; 0x552 <softwareTimers_Init>
	timerListInit();
     53e:	0e 94 31 01 	call	0x262	; 0x262 <timerListInit>
	timer0Init(ms);
     542:	8c 2f       	mov	r24, r28
     544:	0e 94 3b 0a 	call	0x1476	; 0x1476 <timer0Init>
}
     548:	cf 91       	pop	r28
     54a:	08 95       	ret

0000054c <getIdle>:

TaskTCB_t * getIdle(void )
{
		return &idleTCB;
     54c:	86 e3       	ldi	r24, 0x36	; 54
     54e:	92 e0       	ldi	r25, 0x02	; 2
     550:	08 95       	ret

00000552 <softwareTimers_Init>:
#include <stdlib.h>

#if INCLUDE_SOFTWARETIMER == 1

void softwareTimers_Init(void )
{
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	a9 ee       	ldi	r26, 0xE9	; 233
     558:	b1 e0       	ldi	r27, 0x01	; 1
     55a:	c1 e3       	ldi	r28, 0x31	; 49
     55c:	d2 e0       	ldi	r29, 0x02	; 2
     55e:	21 ef       	ldi	r18, 0xF1	; 241
     560:	31 e0       	ldi	r19, 0x01	; 1
     562:	f9 01       	movw	r30, r18
	for(int i = 0 ; i < NUM_OF_CALL_TIMERS ; i ++)
		{
			timers.callback[i] = NULL;
			timers.repetition[i] = NOT_SET;
     564:	92 e0       	ldi	r25, 0x02	; 2
			timers.delayTime[i] = 0;
			timers.timerDelay[i] = 0xFFFFFFFFFFFFFFFF;
     566:	8f ef       	ldi	r24, 0xFF	; 255

void softwareTimers_Init(void )
{
	for(int i = 0 ; i < NUM_OF_CALL_TIMERS ; i ++)
		{
			timers.callback[i] = NULL;
     568:	1d 92       	st	X+, r1
     56a:	1d 92       	st	X+, r1
			timers.repetition[i] = NOT_SET;
     56c:	99 93       	st	Y+, r25
			timers.delayTime[i] = 0;
     56e:	10 a2       	std	Z+32, r1	; 0x20
     570:	11 a2       	std	Z+33, r1	; 0x21
     572:	12 a2       	std	Z+34, r1	; 0x22
     574:	13 a2       	std	Z+35, r1	; 0x23
     576:	14 a2       	std	Z+36, r1	; 0x24
     578:	15 a2       	std	Z+37, r1	; 0x25
     57a:	16 a2       	std	Z+38, r1	; 0x26
     57c:	17 a2       	std	Z+39, r1	; 0x27
			timers.timerDelay[i] = 0xFFFFFFFFFFFFFFFF;
     57e:	80 83       	st	Z, r24
     580:	81 83       	std	Z+1, r24	; 0x01
     582:	82 83       	std	Z+2, r24	; 0x02
     584:	83 83       	std	Z+3, r24	; 0x03
     586:	84 83       	std	Z+4, r24	; 0x04
     588:	85 83       	std	Z+5, r24	; 0x05
     58a:	86 83       	std	Z+6, r24	; 0x06
     58c:	87 83       	std	Z+7, r24	; 0x07
     58e:	38 96       	adiw	r30, 0x08	; 8

#if INCLUDE_SOFTWARETIMER == 1

void softwareTimers_Init(void )
{
	for(int i = 0 ; i < NUM_OF_CALL_TIMERS ; i ++)
     590:	a2 17       	cp	r26, r18
     592:	b3 07       	cpc	r27, r19
     594:	49 f7       	brne	.-46     	; 0x568 <softwareTimers_Init+0x16>
			timers.callback[i] = NULL;
			timers.repetition[i] = NOT_SET;
			timers.delayTime[i] = 0;
			timers.timerDelay[i] = 0xFFFFFFFFFFFFFFFF;
		}
		timers.Num_Of_busyTimers = 0;
     596:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <timers+0x4c>
}
     59a:	df 91       	pop	r29
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <CreateSoftwareTimer>:


timerHandle_t CreateSoftwareTimer(timerCallBack_t callback , uint64_t delay , timer_repetition_t repeat)
{
     5a0:	3f 92       	push	r3
     5a2:	4f 92       	push	r4
     5a4:	5f 92       	push	r5
     5a6:	6f 92       	push	r6
     5a8:	7f 92       	push	r7
     5aa:	8f 92       	push	r8
     5ac:	9f 92       	push	r9
     5ae:	af 92       	push	r10
     5b0:	bf 92       	push	r11
     5b2:	cf 92       	push	r12
     5b4:	df 92       	push	r13
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
     5bc:	1f 93       	push	r17
     5be:	cf 93       	push	r28
     5c0:	df 93       	push	r29
     5c2:	00 d0       	rcall	.+0      	; 0x5c4 <CreateSoftwareTimer+0x24>
     5c4:	00 d0       	rcall	.+0      	; 0x5c6 <CreateSoftwareTimer+0x26>
     5c6:	cd b7       	in	r28, 0x3d	; 61
     5c8:	de b7       	in	r29, 0x3e	; 62
     5ca:	dc 01       	movw	r26, r24
     5cc:	40 2e       	mov	r4, r16
     5ce:	51 2e       	mov	r5, r17
     5d0:	62 2e       	mov	r6, r18
     5d2:	73 2e       	mov	r7, r19
     5d4:	84 2e       	mov	r8, r20
     5d6:	95 2e       	mov	r9, r21
     5d8:	6c 83       	std	Y+4, r22	; 0x04
     5da:	7b 83       	std	Y+3, r23	; 0x03
	//
	//Note that : the user has to check if the timer is successfully Created or Not
	//
	if(timers.Num_Of_busyTimers == NUM_OF_CALL_TIMERS)
     5dc:	90 91 35 02 	lds	r25, 0x0235	; 0x800235 <timers+0x4c>
     5e0:	94 30       	cpi	r25, 0x04	; 4
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <CreateSoftwareTimer+0x46>
     5e4:	8d c0       	rjmp	.+282    	; 0x700 <CreateSoftwareTimer+0x160>
		return 0;
		
	else 
		{
			timers.Num_Of_busyTimers ++;
     5e6:	9f 5f       	subi	r25, 0xFF	; 255
     5e8:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <timers+0x4c>
			for(uint8_t i = 0 ; i < NUM_OF_CALL_TIMERS ; i++)
				{
					if(timers.repetition[i] == NOT_SET)
     5ec:	80 91 31 02 	lds	r24, 0x0231	; 0x800231 <timers+0x48>
     5f0:	82 30       	cpi	r24, 0x02	; 2
     5f2:	29 f1       	breq	.+74     	; 0x63e <CreateSoftwareTimer+0x9e>
     5f4:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <timers+0x49>
     5f8:	82 30       	cpi	r24, 0x02	; 2
     5fa:	91 f0       	breq	.+36     	; 0x620 <CreateSoftwareTimer+0x80>
     5fc:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <timers+0x4a>
     600:	82 30       	cpi	r24, 0x02	; 2
     602:	a9 f0       	breq	.+42     	; 0x62e <CreateSoftwareTimer+0x8e>
     604:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <timers+0x4b>
     608:	82 30       	cpi	r24, 0x02	; 2
     60a:	09 f0       	breq	.+2      	; 0x60e <CreateSoftwareTimer+0x6e>
     60c:	7b c0       	rjmp	.+246    	; 0x704 <CreateSoftwareTimer+0x164>
		return 0;
		
	else 
		{
			timers.Num_Of_busyTimers ++;
			for(uint8_t i = 0 ; i < NUM_OF_CALL_TIMERS ; i++)
     60e:	0f 2e       	mov	r0, r31
     610:	f3 e0       	ldi	r31, 0x03	; 3
     612:	3f 2e       	mov	r3, r31
     614:	f0 2d       	mov	r31, r0
				{
					if(timers.repetition[i] == NOT_SET)
     616:	e3 e0       	ldi	r30, 0x03	; 3
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	fa 83       	std	Y+2, r31	; 0x02
     61c:	e9 83       	std	Y+1, r30	; 0x01
     61e:	12 c0       	rjmp	.+36     	; 0x644 <CreateSoftwareTimer+0xa4>
		return 0;
		
	else 
		{
			timers.Num_Of_busyTimers ++;
			for(uint8_t i = 0 ; i < NUM_OF_CALL_TIMERS ; i++)
     620:	33 24       	eor	r3, r3
     622:	33 94       	inc	r3
				{
					if(timers.repetition[i] == NOT_SET)
     624:	e1 e0       	ldi	r30, 0x01	; 1
     626:	f0 e0       	ldi	r31, 0x00	; 0
     628:	fa 83       	std	Y+2, r31	; 0x02
     62a:	e9 83       	std	Y+1, r30	; 0x01
     62c:	0b c0       	rjmp	.+22     	; 0x644 <CreateSoftwareTimer+0xa4>
		return 0;
		
	else 
		{
			timers.Num_Of_busyTimers ++;
			for(uint8_t i = 0 ; i < NUM_OF_CALL_TIMERS ; i++)
     62e:	68 94       	set
     630:	33 24       	eor	r3, r3
     632:	31 f8       	bld	r3, 1
				{
					if(timers.repetition[i] == NOT_SET)
     634:	e2 e0       	ldi	r30, 0x02	; 2
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	fa 83       	std	Y+2, r31	; 0x02
     63a:	e9 83       	std	Y+1, r30	; 0x01
     63c:	03 c0       	rjmp	.+6      	; 0x644 <CreateSoftwareTimer+0xa4>
     63e:	1a 82       	std	Y+2, r1	; 0x02
     640:	19 82       	std	Y+1, r1	; 0x01
		return 0;
		
	else 
		{
			timers.Num_Of_busyTimers ++;
			for(uint8_t i = 0 ; i < NUM_OF_CALL_TIMERS ; i++)
     642:	31 2c       	mov	r3, r1
				{
					if(timers.repetition[i] == NOT_SET)
						{
							timers.callback[i] = callback;
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	88 0f       	add	r24, r24
     64a:	99 1f       	adc	r25, r25
     64c:	87 51       	subi	r24, 0x17	; 23
     64e:	9e 4f       	sbci	r25, 0xFE	; 254
     650:	fc 01       	movw	r30, r24
     652:	b1 83       	std	Z+1, r27	; 0x01
     654:	a0 83       	st	Z, r26
							timers.repetition[i] = repeat;
     656:	a9 81       	ldd	r26, Y+1	; 0x01
     658:	ba 81       	ldd	r27, Y+2	; 0x02
     65a:	af 5c       	subi	r26, 0xCF	; 207
     65c:	bd 4f       	sbci	r27, 0xFD	; 253
     65e:	ec 92       	st	X, r14
							timers.timerDelay[i] = ticks + delay;
     660:	a9 81       	ldd	r26, Y+1	; 0x01
     662:	ba 81       	ldd	r27, Y+2	; 0x02
     664:	aa 0f       	add	r26, r26
     666:	bb 1f       	adc	r27, r27
     668:	aa 0f       	add	r26, r26
     66a:	bb 1f       	adc	r27, r27
     66c:	aa 0f       	add	r26, r26
     66e:	bb 1f       	adc	r27, r27
     670:	af 50       	subi	r26, 0x0F	; 15
     672:	be 4f       	sbci	r27, 0xFE	; 254
     674:	24 2d       	mov	r18, r4
     676:	35 2d       	mov	r19, r5
     678:	46 2d       	mov	r20, r6
     67a:	57 2d       	mov	r21, r7
     67c:	68 2d       	mov	r22, r8
     67e:	79 2d       	mov	r23, r9
     680:	8c 81       	ldd	r24, Y+4	; 0x04
     682:	9b 81       	ldd	r25, Y+3	; 0x03
     684:	a0 90 10 01 	lds	r10, 0x0110	; 0x800110 <__data_end>
     688:	b0 90 11 01 	lds	r11, 0x0111	; 0x800111 <__data_end+0x1>
     68c:	c0 90 12 01 	lds	r12, 0x0112	; 0x800112 <__data_end+0x2>
     690:	d0 90 13 01 	lds	r13, 0x0113	; 0x800113 <__data_end+0x3>
     694:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <__data_end+0x4>
     698:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <__data_end+0x5>
     69c:	00 91 16 01 	lds	r16, 0x0116	; 0x800116 <__data_end+0x6>
     6a0:	10 91 17 01 	lds	r17, 0x0117	; 0x800117 <__data_end+0x7>
     6a4:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__adddi3>
     6a8:	2c 93       	st	X, r18
     6aa:	11 96       	adiw	r26, 0x01	; 1
     6ac:	3c 93       	st	X, r19
     6ae:	11 97       	sbiw	r26, 0x01	; 1
     6b0:	12 96       	adiw	r26, 0x02	; 2
     6b2:	4c 93       	st	X, r20
     6b4:	12 97       	sbiw	r26, 0x02	; 2
     6b6:	13 96       	adiw	r26, 0x03	; 3
     6b8:	5c 93       	st	X, r21
     6ba:	13 97       	sbiw	r26, 0x03	; 3
     6bc:	14 96       	adiw	r26, 0x04	; 4
     6be:	6c 93       	st	X, r22
     6c0:	14 97       	sbiw	r26, 0x04	; 4
     6c2:	15 96       	adiw	r26, 0x05	; 5
     6c4:	7c 93       	st	X, r23
     6c6:	15 97       	sbiw	r26, 0x05	; 5
     6c8:	16 96       	adiw	r26, 0x06	; 6
     6ca:	8c 93       	st	X, r24
     6cc:	16 97       	sbiw	r26, 0x06	; 6
     6ce:	17 96       	adiw	r26, 0x07	; 7
     6d0:	9c 93       	st	X, r25
							timers.delayTime[i] = delay;
     6d2:	e9 81       	ldd	r30, Y+1	; 0x01
     6d4:	fa 81       	ldd	r31, Y+2	; 0x02
     6d6:	ee 0f       	add	r30, r30
     6d8:	ff 1f       	adc	r31, r31
     6da:	ee 0f       	add	r30, r30
     6dc:	ff 1f       	adc	r31, r31
     6de:	ee 0f       	add	r30, r30
     6e0:	ff 1f       	adc	r31, r31
     6e2:	ef 5e       	subi	r30, 0xEF	; 239
     6e4:	fd 4f       	sbci	r31, 0xFD	; 253
     6e6:	40 82       	st	Z, r4
     6e8:	51 82       	std	Z+1, r5	; 0x01
     6ea:	62 82       	std	Z+2, r6	; 0x02
     6ec:	73 82       	std	Z+3, r7	; 0x03
     6ee:	84 82       	std	Z+4, r8	; 0x04
     6f0:	95 82       	std	Z+5, r9	; 0x05
     6f2:	8c 81       	ldd	r24, Y+4	; 0x04
     6f4:	86 83       	std	Z+6, r24	; 0x06
     6f6:	9b 81       	ldd	r25, Y+3	; 0x03
     6f8:	97 83       	std	Z+7, r25	; 0x07
							return i+1;
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	83 0d       	add	r24, r3
     6fe:	03 c0       	rjmp	.+6      	; 0x706 <CreateSoftwareTimer+0x166>
{
	//
	//Note that : the user has to check if the timer is successfully Created or Not
	//
	if(timers.Num_Of_busyTimers == NUM_OF_CALL_TIMERS)
		return 0;
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	01 c0       	rjmp	.+2      	; 0x706 <CreateSoftwareTimer+0x166>
							return i+1;
						}
				}
		}
		
	return 0;
     704:	80 e0       	ldi	r24, 0x00	; 0
}
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	df 91       	pop	r29
     710:	cf 91       	pop	r28
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	df 90       	pop	r13
     71c:	cf 90       	pop	r12
     71e:	bf 90       	pop	r11
     720:	af 90       	pop	r10
     722:	9f 90       	pop	r9
     724:	8f 90       	pop	r8
     726:	7f 90       	pop	r7
     728:	6f 90       	pop	r6
     72a:	5f 90       	pop	r5
     72c:	4f 90       	pop	r4
     72e:	3f 90       	pop	r3
     730:	08 95       	ret

00000732 <runSoftwareTimers>:


 void runSoftwareTimers(void )
	{
     732:	9f 92       	push	r9
     734:	af 92       	push	r10
     736:	bf 92       	push	r11
     738:	cf 92       	push	r12
     73a:	df 92       	push	r13
     73c:	ef 92       	push	r14
     73e:	ff 92       	push	r15
     740:	0f 93       	push	r16
     742:	1f 93       	push	r17
     744:	cf 93       	push	r28
     746:	df 93       	push	r29
     748:	1f 92       	push	r1
     74a:	cd b7       	in	r28, 0x3d	; 61
     74c:	de b7       	in	r29, 0x3e	; 62
		asm("mov r1 , 0");
     74e:	10 2c       	mov	r1, r0
		for(volatile uint8_t  i = 0x0; i < NUM_OF_CALL_TIMERS ; i++)
     750:	19 82       	std	Y+1, r1	; 0x01
     752:	89 81       	ldd	r24, Y+1	; 0x01
     754:	84 30       	cpi	r24, 0x04	; 4
     756:	08 f0       	brcs	.+2      	; 0x75a <runSoftwareTimers+0x28>
     758:	9b c0       	rjmp	.+310    	; 0x890 <__stack+0x31>
				{
					if(timers.timerDelay[i] == ticks)
						{
							timers.callback[i]();							
							if(timers.repetition[i] == ONE_SHOT)
								timers.repetition[i] = IDLE;
     75a:	0f 2e       	mov	r0, r31
     75c:	f3 e0       	ldi	r31, 0x03	; 3
     75e:	9f 2e       	mov	r9, r31
     760:	f0 2d       	mov	r31, r0
 void runSoftwareTimers(void )
	{
		asm("mov r1 , 0");
		for(volatile uint8_t  i = 0x0; i < NUM_OF_CALL_TIMERS ; i++)
			{
				if((timers.repetition[i] == IDLE) ||(timers.repetition[i] == NOT_SET))
     762:	e9 81       	ldd	r30, Y+1	; 0x01
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	ef 5c       	subi	r30, 0xCF	; 207
     768:	fd 4f       	sbci	r31, 0xFD	; 253
     76a:	80 81       	ld	r24, Z
     76c:	83 30       	cpi	r24, 0x03	; 3
     76e:	09 f4       	brne	.+2      	; 0x772 <runSoftwareTimers+0x40>
     770:	88 c0       	rjmp	.+272    	; 0x882 <__stack+0x23>
     772:	e9 81       	ldd	r30, Y+1	; 0x01
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	ef 5c       	subi	r30, 0xCF	; 207
     778:	fd 4f       	sbci	r31, 0xFD	; 253
     77a:	80 81       	ld	r24, Z
     77c:	82 30       	cpi	r24, 0x02	; 2
     77e:	09 f4       	brne	.+2      	; 0x782 <runSoftwareTimers+0x50>
     780:	80 c0       	rjmp	.+256    	; 0x882 <__stack+0x23>
					continue ;
					
				else 
				{
					if(timers.timerDelay[i] == ticks)
     782:	e9 81       	ldd	r30, Y+1	; 0x01
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	ee 0f       	add	r30, r30
     788:	ff 1f       	adc	r31, r31
     78a:	ee 0f       	add	r30, r30
     78c:	ff 1f       	adc	r31, r31
     78e:	ee 0f       	add	r30, r30
     790:	ff 1f       	adc	r31, r31
     792:	ef 50       	subi	r30, 0x0F	; 15
     794:	fe 4f       	sbci	r31, 0xFE	; 254
     796:	20 81       	ld	r18, Z
     798:	31 81       	ldd	r19, Z+1	; 0x01
     79a:	42 81       	ldd	r20, Z+2	; 0x02
     79c:	53 81       	ldd	r21, Z+3	; 0x03
     79e:	64 81       	ldd	r22, Z+4	; 0x04
     7a0:	75 81       	ldd	r23, Z+5	; 0x05
     7a2:	a0 90 10 01 	lds	r10, 0x0110	; 0x800110 <__data_end>
     7a6:	b0 90 11 01 	lds	r11, 0x0111	; 0x800111 <__data_end+0x1>
     7aa:	c0 90 12 01 	lds	r12, 0x0112	; 0x800112 <__data_end+0x2>
     7ae:	d0 90 13 01 	lds	r13, 0x0113	; 0x800113 <__data_end+0x3>
     7b2:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <__data_end+0x4>
     7b6:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <__data_end+0x5>
     7ba:	00 91 16 01 	lds	r16, 0x0116	; 0x800116 <__data_end+0x6>
     7be:	10 91 17 01 	lds	r17, 0x0117	; 0x800117 <__data_end+0x7>
     7c2:	86 81       	ldd	r24, Z+6	; 0x06
     7c4:	97 81       	ldd	r25, Z+7	; 0x07
     7c6:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__cmpdi2>
     7ca:	09 f0       	breq	.+2      	; 0x7ce <runSoftwareTimers+0x9c>
     7cc:	5a c0       	rjmp	.+180    	; 0x882 <__stack+0x23>
						{
							timers.callback[i]();							
     7ce:	e9 81       	ldd	r30, Y+1	; 0x01
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	e7 51       	subi	r30, 0x17	; 23
     7d8:	fe 4f       	sbci	r31, 0xFE	; 254
     7da:	01 90       	ld	r0, Z+
     7dc:	f0 81       	ld	r31, Z
     7de:	e0 2d       	mov	r30, r0
     7e0:	09 95       	icall
							if(timers.repetition[i] == ONE_SHOT)
     7e2:	e9 81       	ldd	r30, Y+1	; 0x01
     7e4:	f0 e0       	ldi	r31, 0x00	; 0
     7e6:	ef 5c       	subi	r30, 0xCF	; 207
     7e8:	fd 4f       	sbci	r31, 0xFD	; 253
     7ea:	80 81       	ld	r24, Z
     7ec:	81 11       	cpse	r24, r1
     7ee:	06 c0       	rjmp	.+12     	; 0x7fc <runSoftwareTimers+0xca>
								timers.repetition[i] = IDLE;
     7f0:	e9 81       	ldd	r30, Y+1	; 0x01
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	ef 5c       	subi	r30, 0xCF	; 207
     7f6:	fd 4f       	sbci	r31, 0xFD	; 253
     7f8:	90 82       	st	Z, r9
     7fa:	43 c0       	rjmp	.+134    	; 0x882 <__stack+0x23>
								
							else
								timers.timerDelay[i] = ticks + timers.delayTime[i];
     7fc:	e9 81       	ldd	r30, Y+1	; 0x01
     7fe:	a9 81       	ldd	r26, Y+1	; 0x01
     800:	f0 e0       	ldi	r31, 0x00	; 0
     802:	ee 0f       	add	r30, r30
     804:	ff 1f       	adc	r31, r31
     806:	ee 0f       	add	r30, r30
     808:	ff 1f       	adc	r31, r31
     80a:	ee 0f       	add	r30, r30
     80c:	ff 1f       	adc	r31, r31
     80e:	ef 50       	subi	r30, 0x0F	; 15
     810:	fe 4f       	sbci	r31, 0xFE	; 254
     812:	b0 e0       	ldi	r27, 0x00	; 0
     814:	aa 0f       	add	r26, r26
     816:	bb 1f       	adc	r27, r27
     818:	aa 0f       	add	r26, r26
     81a:	bb 1f       	adc	r27, r27
     81c:	aa 0f       	add	r26, r26
     81e:	bb 1f       	adc	r27, r27
     820:	af 5e       	subi	r26, 0xEF	; 239
     822:	bd 4f       	sbci	r27, 0xFD	; 253
     824:	2c 91       	ld	r18, X
     826:	11 96       	adiw	r26, 0x01	; 1
     828:	3c 91       	ld	r19, X
     82a:	11 97       	sbiw	r26, 0x01	; 1
     82c:	12 96       	adiw	r26, 0x02	; 2
     82e:	4c 91       	ld	r20, X
     830:	12 97       	sbiw	r26, 0x02	; 2
     832:	13 96       	adiw	r26, 0x03	; 3
     834:	5c 91       	ld	r21, X
     836:	13 97       	sbiw	r26, 0x03	; 3
     838:	14 96       	adiw	r26, 0x04	; 4
     83a:	6c 91       	ld	r22, X
     83c:	14 97       	sbiw	r26, 0x04	; 4
     83e:	15 96       	adiw	r26, 0x05	; 5
     840:	7c 91       	ld	r23, X
     842:	15 97       	sbiw	r26, 0x05	; 5
     844:	16 96       	adiw	r26, 0x06	; 6
     846:	8c 91       	ld	r24, X
     848:	16 97       	sbiw	r26, 0x06	; 6
     84a:	17 96       	adiw	r26, 0x07	; 7
     84c:	9c 91       	ld	r25, X
     84e:	a0 90 10 01 	lds	r10, 0x0110	; 0x800110 <__data_end>
     852:	b0 90 11 01 	lds	r11, 0x0111	; 0x800111 <__data_end+0x1>
     856:	c0 90 12 01 	lds	r12, 0x0112	; 0x800112 <__data_end+0x2>
     85a:	d0 90 13 01 	lds	r13, 0x0113	; 0x800113 <__data_end+0x3>
     85e:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <__data_end+0x4>
     862:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <__data_end+0x5>
     866:	00 91 16 01 	lds	r16, 0x0116	; 0x800116 <__data_end+0x6>
     86a:	10 91 17 01 	lds	r17, 0x0117	; 0x800117 <__data_end+0x7>
     86e:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__adddi3>
     872:	20 83       	st	Z, r18
     874:	31 83       	std	Z+1, r19	; 0x01
     876:	42 83       	std	Z+2, r20	; 0x02
     878:	53 83       	std	Z+3, r21	; 0x03
     87a:	64 83       	std	Z+4, r22	; 0x04
     87c:	75 83       	std	Z+5, r23	; 0x05
     87e:	86 83       	std	Z+6, r24	; 0x06
     880:	97 83       	std	Z+7, r25	; 0x07


 void runSoftwareTimers(void )
	{
		asm("mov r1 , 0");
		for(volatile uint8_t  i = 0x0; i < NUM_OF_CALL_TIMERS ; i++)
     882:	89 81       	ldd	r24, Y+1	; 0x01
     884:	8f 5f       	subi	r24, 0xFF	; 255
     886:	89 83       	std	Y+1, r24	; 0x01
     888:	89 81       	ldd	r24, Y+1	; 0x01
     88a:	84 30       	cpi	r24, 0x04	; 4
     88c:	08 f4       	brcc	.+2      	; 0x890 <__stack+0x31>
     88e:	69 cf       	rjmp	.-302    	; 0x762 <runSoftwareTimers+0x30>
							else
								timers.timerDelay[i] = ticks + timers.delayTime[i];
						}
				}
			}
	}
     890:	0f 90       	pop	r0
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	1f 91       	pop	r17
     898:	0f 91       	pop	r16
     89a:	ff 90       	pop	r15
     89c:	ef 90       	pop	r14
     89e:	df 90       	pop	r13
     8a0:	cf 90       	pop	r12
     8a2:	bf 90       	pop	r11
     8a4:	af 90       	pop	r10
     8a6:	9f 90       	pop	r9
     8a8:	08 95       	ret

000008aa <ThreadCreate>:
{
	cli();
	if(TCB == NULL)
		TCB = pRunning->pTCB;
	taskDelete(TCB);
	asm("call scheduler");
     8aa:	fb 01       	movw	r30, r22
     8ac:	ba 01       	movw	r22, r20
     8ae:	6d 59       	subi	r22, 0x9D	; 157
     8b0:	7f 4f       	sbci	r23, 0xFF	; 255
     8b2:	71 83       	std	Z+1, r23	; 0x01
     8b4:	60 83       	st	Z, r22
     8b6:	22 83       	std	Z+2, r18	; 0x02
     8b8:	02 96       	adiw	r24, 0x02	; 2
     8ba:	da 01       	movw	r26, r20
     8bc:	ae 59       	subi	r26, 0x9E	; 158
     8be:	bf 4f       	sbci	r27, 0xFF	; 255
     8c0:	9c 93       	st	X, r25
     8c2:	a0 81       	ld	r26, Z
     8c4:	b1 81       	ldd	r27, Z+1	; 0x01
     8c6:	8c 93       	st	X, r24
     8c8:	a0 81       	ld	r26, Z
     8ca:	b1 81       	ldd	r27, Z+1	; 0x01
     8cc:	13 97       	sbiw	r26, 0x03	; 3
     8ce:	82 e8       	ldi	r24, 0x82	; 130
     8d0:	8c 93       	st	X, r24
     8d2:	a0 81       	ld	r26, Z
     8d4:	b1 81       	ldd	r27, Z+1	; 0x01
     8d6:	92 97       	sbiw	r26, 0x22	; 34
     8d8:	83 e3       	ldi	r24, 0x33	; 51
     8da:	8c 93       	st	X, r24
     8dc:	80 81       	ld	r24, Z
     8de:	91 81       	ldd	r25, Z+1	; 0x01
     8e0:	83 97       	sbiw	r24, 0x23	; 35
     8e2:	91 83       	std	Z+1, r25	; 0x01
     8e4:	80 83       	st	Z, r24
     8e6:	f2 87       	std	Z+10, r31	; 0x0a
     8e8:	e1 87       	std	Z+9, r30	; 0x09
     8ea:	83 e1       	ldi	r24, 0x13	; 19
     8ec:	28 9f       	mul	r18, r24
     8ee:	90 01       	movw	r18, r0
     8f0:	11 24       	eor	r1, r1
     8f2:	28 5e       	subi	r18, 0xE8	; 232
     8f4:	3e 4f       	sbci	r19, 0xFE	; 254
     8f6:	30 87       	std	Z+8, r19	; 0x08
     8f8:	27 83       	std	Z+7, r18	; 0x07
     8fa:	f5 8b       	std	Z+21, r31	; 0x15
     8fc:	e4 8b       	std	Z+20, r30	; 0x14
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	83 8b       	std	Z+19, r24	; 0x13
     902:	cf 01       	movw	r24, r30
     904:	03 96       	adiw	r24, 0x03	; 3
     906:	0e 94 15 01 	call	0x22a	; 0x22a <addToReady>
     90a:	08 95       	ret

0000090c <getRunning>:
     90c:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <pRunning>
     910:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <pRunning+0x1>
     914:	86 81       	ldd	r24, Z+6	; 0x06
     916:	97 81       	ldd	r25, Z+7	; 0x07
     918:	08 95       	ret

0000091a <getNext>:
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <loop>
     922:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <readyList+0x12>
     926:	88 23       	and	r24, r24
     928:	09 f4       	brne	.+2      	; 0x92c <getNext+0x12>
     92a:	50 c0       	rjmp	.+160    	; 0x9cc <getNext+0xb2>
     92c:	07 c0       	rjmp	.+14     	; 0x93c <getNext+0x22>
     92e:	ac 01       	movw	r20, r24
     930:	35 a1       	ldd	r19, Z+37	; 0x25
     932:	33 23       	and	r19, r19
     934:	c9 f1       	breq	.+114    	; 0x9a8 <getNext+0x8e>
     936:	20 93 b8 02 	sts	0x02B8, r18	; 0x8002b8 <loop>
     93a:	02 c0       	rjmp	.+4      	; 0x940 <getNext+0x26>
     93c:	40 e0       	ldi	r20, 0x00	; 0
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	83 e1       	ldi	r24, 0x13	; 19
     942:	84 9f       	mul	r24, r20
     944:	f0 01       	movw	r30, r0
     946:	85 9f       	mul	r24, r21
     948:	f0 0d       	add	r31, r0
     94a:	11 24       	eor	r1, r1
     94c:	df 01       	movw	r26, r30
     94e:	a8 5e       	subi	r26, 0xE8	; 232
     950:	be 4f       	sbci	r27, 0xFE	; 254
     952:	cd 91       	ld	r28, X+
     954:	dc 91       	ld	r29, X
     956:	11 97       	sbiw	r26, 0x01	; 1
     958:	88 81       	ld	r24, Y
     95a:	99 81       	ldd	r25, Y+1	; 0x01
     95c:	8d 93       	st	X+, r24
     95e:	9c 93       	st	X, r25
     960:	e6 5e       	subi	r30, 0xE6	; 230
     962:	fe 4f       	sbci	r31, 0xFE	; 254
     964:	8e 17       	cp	r24, r30
     966:	9f 07       	cpc	r25, r31
     968:	b9 f4       	brne	.+46     	; 0x998 <getNext+0x7e>
     96a:	23 e1       	ldi	r18, 0x13	; 19
     96c:	24 9f       	mul	r18, r20
     96e:	d0 01       	movw	r26, r0
     970:	25 9f       	mul	r18, r21
     972:	b0 0d       	add	r27, r0
     974:	11 24       	eor	r1, r1
     976:	a8 5e       	subi	r26, 0xE8	; 232
     978:	be 4f       	sbci	r27, 0xFE	; 254
     97a:	38 2f       	mov	r19, r24
     97c:	29 2f       	mov	r18, r25
     97e:	02 c0       	rjmp	.+4      	; 0x984 <getNext+0x6a>
     980:	e3 2f       	mov	r30, r19
     982:	f2 2f       	mov	r31, r18
     984:	01 90       	ld	r0, Z+
     986:	f0 81       	ld	r31, Z
     988:	e0 2d       	mov	r30, r0
     98a:	11 96       	adiw	r26, 0x01	; 1
     98c:	fc 93       	st	X, r31
     98e:	ee 93       	st	-X, r30
     990:	8e 17       	cp	r24, r30
     992:	9f 07       	cpc	r25, r31
     994:	a9 f3       	breq	.-22     	; 0x980 <getNext+0x66>
     996:	01 c0       	rjmp	.+2      	; 0x99a <getNext+0x80>
     998:	fc 01       	movw	r30, r24
     99a:	f0 93 ba 02 	sts	0x02BA, r31	; 0x8002ba <pRunning+0x1>
     99e:	e0 93 b9 02 	sts	0x02B9, r30	; 0x8002b9 <pRunning>
     9a2:	86 81       	ldd	r24, Z+6	; 0x06
     9a4:	97 81       	ldd	r25, Z+7	; 0x07
     9a6:	18 c0       	rjmp	.+48     	; 0x9d8 <getNext+0xbe>
     9a8:	2f 5f       	subi	r18, 0xFF	; 255
     9aa:	01 96       	adiw	r24, 0x01	; 1
     9ac:	73 96       	adiw	r30, 0x13	; 19
     9ae:	2a 30       	cpi	r18, 0x0A	; 10
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <getNext+0x9a>
     9b2:	bd cf       	rjmp	.-134    	; 0x92e <getNext+0x14>
     9b4:	8a e0       	ldi	r24, 0x0A	; 10
     9b6:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <loop>
     9ba:	89 e3       	ldi	r24, 0x39	; 57
     9bc:	92 e0       	ldi	r25, 0x02	; 2
     9be:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <pRunning+0x1>
     9c2:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <pRunning>
     9c6:	86 e3       	ldi	r24, 0x36	; 54
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	06 c0       	rjmp	.+12     	; 0x9d8 <getNext+0xbe>
     9cc:	e8 e1       	ldi	r30, 0x18	; 24
     9ce:	f1 e0       	ldi	r31, 0x01	; 1
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	21 e0       	ldi	r18, 0x01	; 1
     9d6:	ab cf       	rjmp	.-170    	; 0x92e <getNext+0x14>
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	08 95       	ret

000009de <taskDelete>:
     9de:	fc 01       	movw	r30, r24
     9e0:	f8 94       	cli
     9e2:	89 2b       	or	r24, r25
     9e4:	39 f4       	brne	.+14     	; 0x9f4 <taskDelete+0x16>
     9e6:	e0 91 b9 02 	lds	r30, 0x02B9	; 0x8002b9 <pRunning>
     9ea:	f0 91 ba 02 	lds	r31, 0x02BA	; 0x8002ba <pRunning+0x1>
     9ee:	06 80       	ldd	r0, Z+6	; 0x06
     9f0:	f7 81       	ldd	r31, Z+7	; 0x07
     9f2:	e0 2d       	mov	r30, r0
     9f4:	a7 81       	ldd	r26, Z+7	; 0x07
     9f6:	b0 85       	ldd	r27, Z+8	; 0x08
     9f8:	2d 91       	ld	r18, X+
     9fa:	3c 91       	ld	r19, X
     9fc:	11 97       	sbiw	r26, 0x01	; 1
     9fe:	cf 01       	movw	r24, r30
     a00:	03 96       	adiw	r24, 0x03	; 3
     a02:	28 17       	cp	r18, r24
     a04:	39 07       	cpc	r19, r25
     a06:	21 f4       	brne	.+8      	; 0xa10 <taskDelete+0x32>
     a08:	85 81       	ldd	r24, Z+5	; 0x05
     a0a:	96 81       	ldd	r25, Z+6	; 0x06
     a0c:	8d 93       	st	X+, r24
     a0e:	9c 93       	st	X, r25
     a10:	a5 81       	ldd	r26, Z+5	; 0x05
     a12:	b6 81       	ldd	r27, Z+6	; 0x06
     a14:	83 81       	ldd	r24, Z+3	; 0x03
     a16:	94 81       	ldd	r25, Z+4	; 0x04
     a18:	8d 93       	st	X+, r24
     a1a:	9c 93       	st	X, r25
     a1c:	a3 81       	ldd	r26, Z+3	; 0x03
     a1e:	b4 81       	ldd	r27, Z+4	; 0x04
     a20:	85 81       	ldd	r24, Z+5	; 0x05
     a22:	96 81       	ldd	r25, Z+6	; 0x06
     a24:	13 96       	adiw	r26, 0x03	; 3
     a26:	9c 93       	st	X, r25
     a28:	8e 93       	st	-X, r24
     a2a:	12 97       	sbiw	r26, 0x02	; 2
     a2c:	16 82       	std	Z+6, r1	; 0x06
     a2e:	15 82       	std	Z+5, r1	; 0x05
     a30:	14 82       	std	Z+4, r1	; 0x04
     a32:	13 82       	std	Z+3, r1	; 0x03
     a34:	a7 81       	ldd	r26, Z+7	; 0x07
     a36:	b0 85       	ldd	r27, Z+8	; 0x08
     a38:	52 96       	adiw	r26, 0x12	; 18
     a3a:	8c 91       	ld	r24, X
     a3c:	52 97       	sbiw	r26, 0x12	; 18
     a3e:	81 50       	subi	r24, 0x01	; 1
     a40:	52 96       	adiw	r26, 0x12	; 18
     a42:	8c 93       	st	X, r24
     a44:	10 86       	std	Z+8, r1	; 0x08
     a46:	17 82       	std	Z+7, r1	; 0x07
     a48:	08 95       	ret

00000a4a <taskAddToReady>:
     a4a:	cf 93       	push	r28
     a4c:	df 93       	push	r29
     a4e:	fc 01       	movw	r30, r24
     a50:	f8 94       	cli
     a52:	82 81       	ldd	r24, Z+2	; 0x02
     a54:	68 2f       	mov	r22, r24
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	23 e1       	ldi	r18, 0x13	; 19
     a5a:	82 9f       	mul	r24, r18
     a5c:	c0 01       	movw	r24, r0
     a5e:	11 24       	eor	r1, r1
     a60:	88 5e       	subi	r24, 0xE8	; 232
     a62:	9e 4f       	sbci	r25, 0xFE	; 254
     a64:	27 81       	ldd	r18, Z+7	; 0x07
     a66:	30 85       	ldd	r19, Z+8	; 0x08
     a68:	28 17       	cp	r18, r24
     a6a:	39 07       	cpc	r19, r25
     a6c:	11 f4       	brne	.+4      	; 0xa72 <taskAddToReady+0x28>
     a6e:	78 94       	sei
     a70:	2b c0       	rjmp	.+86     	; 0xac8 <taskAddToReady+0x7e>
     a72:	af 01       	movw	r20, r30
     a74:	4d 5f       	subi	r20, 0xFD	; 253
     a76:	5f 4f       	sbci	r21, 0xFF	; 255
     a78:	83 e1       	ldi	r24, 0x13	; 19
     a7a:	86 9f       	mul	r24, r22
     a7c:	90 01       	movw	r18, r0
     a7e:	87 9f       	mul	r24, r23
     a80:	30 0d       	add	r19, r0
     a82:	11 24       	eor	r1, r1
     a84:	d9 01       	movw	r26, r18
     a86:	a8 5e       	subi	r26, 0xE8	; 232
     a88:	be 4f       	sbci	r27, 0xFE	; 254
     a8a:	14 96       	adiw	r26, 0x04	; 4
     a8c:	cd 91       	ld	r28, X+
     a8e:	dc 91       	ld	r29, X
     a90:	15 97       	sbiw	r26, 0x05	; 5
     a92:	59 83       	std	Y+1, r21	; 0x01
     a94:	48 83       	st	Y, r20
     a96:	26 5e       	subi	r18, 0xE6	; 230
     a98:	3e 4f       	sbci	r19, 0xFE	; 254
     a9a:	34 83       	std	Z+4, r19	; 0x04
     a9c:	23 83       	std	Z+3, r18	; 0x03
     a9e:	15 96       	adiw	r26, 0x05	; 5
     aa0:	5c 93       	st	X, r21
     aa2:	4e 93       	st	-X, r20
     aa4:	14 97       	sbiw	r26, 0x04	; 4
     aa6:	d6 83       	std	Z+6, r29	; 0x06
     aa8:	c5 83       	std	Z+5, r28	; 0x05
     aaa:	92 81       	ldd	r25, Z+2	; 0x02
     aac:	89 9f       	mul	r24, r25
     aae:	c0 01       	movw	r24, r0
     ab0:	11 24       	eor	r1, r1
     ab2:	88 5e       	subi	r24, 0xE8	; 232
     ab4:	9e 4f       	sbci	r25, 0xFE	; 254
     ab6:	90 87       	std	Z+8, r25	; 0x08
     ab8:	87 83       	std	Z+7, r24	; 0x07
     aba:	52 96       	adiw	r26, 0x12	; 18
     abc:	8c 91       	ld	r24, X
     abe:	52 97       	sbiw	r26, 0x12	; 18
     ac0:	8f 5f       	subi	r24, 0xFF	; 255
     ac2:	52 96       	adiw	r26, 0x12	; 18
     ac4:	8c 93       	st	X, r24
     ac6:	78 94       	sei
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	08 95       	ret

00000ace <taskAddToTimerList>:
     ace:	4f 92       	push	r4
     ad0:	5f 92       	push	r5
     ad2:	6f 92       	push	r6
     ad4:	7f 92       	push	r7
     ad6:	8f 92       	push	r8
     ad8:	9f 92       	push	r9
     ada:	af 92       	push	r10
     adc:	bf 92       	push	r11
     ade:	cf 92       	push	r12
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	dc 01       	movw	r26, r24
     af0:	18 96       	adiw	r26, 0x08	; 8
     af2:	4c 90       	ld	r4, X
     af4:	18 97       	sbiw	r26, 0x08	; 8
     af6:	19 96       	adiw	r26, 0x09	; 9
     af8:	5c 90       	ld	r5, X
     afa:	19 97       	sbiw	r26, 0x09	; 9
     afc:	1a 96       	adiw	r26, 0x0a	; 10
     afe:	6c 90       	ld	r6, X
     b00:	1a 97       	sbiw	r26, 0x0a	; 10
     b02:	1b 96       	adiw	r26, 0x0b	; 11
     b04:	7c 90       	ld	r7, X
     b06:	1b 97       	sbiw	r26, 0x0b	; 11
     b08:	1c 96       	adiw	r26, 0x0c	; 12
     b0a:	8c 90       	ld	r8, X
     b0c:	1c 97       	sbiw	r26, 0x0c	; 12
     b0e:	1d 96       	adiw	r26, 0x0d	; 13
     b10:	9c 90       	ld	r9, X
     b12:	1d 97       	sbiw	r26, 0x0d	; 13
     b14:	1e 96       	adiw	r26, 0x0e	; 14
     b16:	dc 91       	ld	r29, X
     b18:	1e 97       	sbiw	r26, 0x0e	; 14
     b1a:	1f 96       	adiw	r26, 0x0f	; 15
     b1c:	cc 91       	ld	r28, X
     b1e:	1f 97       	sbiw	r26, 0x0f	; 15
     b20:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <timerList>
     b24:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <timerList+0x1>
     b28:	a0 84       	ldd	r10, Z+8	; 0x08
     b2a:	b1 84       	ldd	r11, Z+9	; 0x09
     b2c:	c2 84       	ldd	r12, Z+10	; 0x0a
     b2e:	d3 84       	ldd	r13, Z+11	; 0x0b
     b30:	e4 84       	ldd	r14, Z+12	; 0x0c
     b32:	f5 84       	ldd	r15, Z+13	; 0x0d
     b34:	06 85       	ldd	r16, Z+14	; 0x0e
     b36:	17 85       	ldd	r17, Z+15	; 0x0f
     b38:	24 2d       	mov	r18, r4
     b3a:	35 2d       	mov	r19, r5
     b3c:	46 2d       	mov	r20, r6
     b3e:	57 2d       	mov	r21, r7
     b40:	68 2d       	mov	r22, r8
     b42:	79 2d       	mov	r23, r9
     b44:	8d 2f       	mov	r24, r29
     b46:	9c 2f       	mov	r25, r28
     b48:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__cmpdi2>
     b4c:	09 f0       	breq	.+2      	; 0xb50 <taskAddToTimerList+0x82>
     b4e:	20 f5       	brcc	.+72     	; 0xb98 <taskAddToTimerList+0xca>
     b50:	80 81       	ld	r24, Z
     b52:	91 81       	ldd	r25, Z+1	; 0x01
     b54:	11 96       	adiw	r26, 0x01	; 1
     b56:	9c 93       	st	X, r25
     b58:	8e 93       	st	-X, r24
     b5a:	c0 81       	ld	r28, Z
     b5c:	d1 81       	ldd	r29, Z+1	; 0x01
     b5e:	bb 83       	std	Y+3, r27	; 0x03
     b60:	aa 83       	std	Y+2, r26	; 0x02
     b62:	13 96       	adiw	r26, 0x03	; 3
     b64:	fc 93       	st	X, r31
     b66:	ee 93       	st	-X, r30
     b68:	12 97       	sbiw	r26, 0x02	; 2
     b6a:	b1 83       	std	Z+1, r27	; 0x01
     b6c:	a0 83       	st	Z, r26
     b6e:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <timerList>
     b72:	90 91 d7 01 	lds	r25, 0x01D7	; 0x8001d7 <timerList+0x1>
     b76:	8e 17       	cp	r24, r30
     b78:	9f 07       	cpc	r25, r31
     b7a:	21 f4       	brne	.+8      	; 0xb84 <taskAddToTimerList+0xb6>
     b7c:	b0 93 d7 01 	sts	0x01D7, r27	; 0x8001d7 <timerList+0x1>
     b80:	a0 93 d6 01 	sts	0x01D6, r26	; 0x8001d6 <timerList>
     b84:	e6 ed       	ldi	r30, 0xD6	; 214
     b86:	f1 e0       	ldi	r31, 0x01	; 1
     b88:	82 89       	ldd	r24, Z+18	; 0x12
     b8a:	8f 5f       	subi	r24, 0xFF	; 255
     b8c:	82 8b       	std	Z+18, r24	; 0x12
     b8e:	15 96       	adiw	r26, 0x05	; 5
     b90:	fc 93       	st	X, r31
     b92:	ee 93       	st	-X, r30
     b94:	14 97       	sbiw	r26, 0x04	; 4
     b96:	18 c0       	rjmp	.+48     	; 0xbc8 <taskAddToTimerList+0xfa>
     b98:	02 80       	ldd	r0, Z+2	; 0x02
     b9a:	f3 81       	ldd	r31, Z+3	; 0x03
     b9c:	e0 2d       	mov	r30, r0
     b9e:	a0 84       	ldd	r10, Z+8	; 0x08
     ba0:	b1 84       	ldd	r11, Z+9	; 0x09
     ba2:	c2 84       	ldd	r12, Z+10	; 0x0a
     ba4:	d3 84       	ldd	r13, Z+11	; 0x0b
     ba6:	e4 84       	ldd	r14, Z+12	; 0x0c
     ba8:	f5 84       	ldd	r15, Z+13	; 0x0d
     baa:	06 85       	ldd	r16, Z+14	; 0x0e
     bac:	17 85       	ldd	r17, Z+15	; 0x0f
     bae:	24 2d       	mov	r18, r4
     bb0:	35 2d       	mov	r19, r5
     bb2:	46 2d       	mov	r20, r6
     bb4:	57 2d       	mov	r21, r7
     bb6:	68 2d       	mov	r22, r8
     bb8:	79 2d       	mov	r23, r9
     bba:	8d 2f       	mov	r24, r29
     bbc:	9c 2f       	mov	r25, r28
     bbe:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__cmpdi2>
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <taskAddToTimerList+0xf8>
     bc4:	48 f7       	brcc	.-46     	; 0xb98 <taskAddToTimerList+0xca>
     bc6:	c4 cf       	rjmp	.-120    	; 0xb50 <taskAddToTimerList+0x82>
     bc8:	df 91       	pop	r29
     bca:	cf 91       	pop	r28
     bcc:	1f 91       	pop	r17
     bce:	0f 91       	pop	r16
     bd0:	ff 90       	pop	r15
     bd2:	ef 90       	pop	r14
     bd4:	df 90       	pop	r13
     bd6:	cf 90       	pop	r12
     bd8:	bf 90       	pop	r11
     bda:	af 90       	pop	r10
     bdc:	9f 90       	pop	r9
     bde:	8f 90       	pop	r8
     be0:	7f 90       	pop	r7
     be2:	6f 90       	pop	r6
     be4:	5f 90       	pop	r5
     be6:	4f 90       	pop	r4
     be8:	08 95       	ret

00000bea <taskDelay>:
     bea:	af 92       	push	r10
     bec:	bf 92       	push	r11
     bee:	cf 92       	push	r12
     bf0:	df 92       	push	r13
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	ec 01       	movw	r28, r24
     c00:	b2 2f       	mov	r27, r18
     c02:	a3 2f       	mov	r26, r19
     c04:	f4 2f       	mov	r31, r20
     c06:	e5 2f       	mov	r30, r21
     c08:	86 2f       	mov	r24, r22
     c0a:	97 2f       	mov	r25, r23
     c0c:	f8 94       	cli
     c0e:	20 97       	sbiw	r28, 0x00	; 0
     c10:	39 f4       	brne	.+14     	; 0xc20 <taskDelay+0x36>
     c12:	c0 91 b9 02 	lds	r28, 0x02B9	; 0x8002b9 <pRunning>
     c16:	d0 91 ba 02 	lds	r29, 0x02BA	; 0x8002ba <pRunning+0x1>
     c1a:	0e 80       	ldd	r0, Y+6	; 0x06
     c1c:	df 81       	ldd	r29, Y+7	; 0x07
     c1e:	c0 2d       	mov	r28, r0
     c20:	20 2f       	mov	r18, r16
     c22:	31 2f       	mov	r19, r17
     c24:	4b 2f       	mov	r20, r27
     c26:	5a 2f       	mov	r21, r26
     c28:	6f 2f       	mov	r22, r31
     c2a:	7e 2f       	mov	r23, r30
     c2c:	a0 90 10 01 	lds	r10, 0x0110	; 0x800110 <__data_end>
     c30:	b0 90 11 01 	lds	r11, 0x0111	; 0x800111 <__data_end+0x1>
     c34:	c0 90 12 01 	lds	r12, 0x0112	; 0x800112 <__data_end+0x2>
     c38:	d0 90 13 01 	lds	r13, 0x0113	; 0x800113 <__data_end+0x3>
     c3c:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <__data_end+0x4>
     c40:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <__data_end+0x5>
     c44:	00 91 16 01 	lds	r16, 0x0116	; 0x800116 <__data_end+0x6>
     c48:	10 91 17 01 	lds	r17, 0x0117	; 0x800117 <__data_end+0x7>
     c4c:	0e 94 ab 0a 	call	0x1556	; 0x1556 <__adddi3>
     c50:	2b 87       	std	Y+11, r18	; 0x0b
     c52:	3c 87       	std	Y+12, r19	; 0x0c
     c54:	4d 87       	std	Y+13, r20	; 0x0d
     c56:	5e 87       	std	Y+14, r21	; 0x0e
     c58:	6f 87       	std	Y+15, r22	; 0x0f
     c5a:	78 8b       	std	Y+16, r23	; 0x10
     c5c:	89 8b       	std	Y+17, r24	; 0x11
     c5e:	9a 8b       	std	Y+18, r25	; 0x12
     c60:	ce 01       	movw	r24, r28
     c62:	0e 94 ef 04 	call	0x9de	; 0x9de <taskDelete>
     c66:	ce 01       	movw	r24, r28
     c68:	03 96       	adiw	r24, 0x03	; 3
     c6a:	0e 94 67 05 	call	0xace	; 0xace <taskAddToTimerList>
     c6e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <scheduler>
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	df 90       	pop	r13
     c80:	cf 90       	pop	r12
     c82:	bf 90       	pop	r11
     c84:	af 90       	pop	r10
     c86:	08 95       	ret

00000c88 <deleteFromTimerList>:
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	fc 01       	movw	r30, r24
     c8e:	c5 81       	ldd	r28, Z+5	; 0x05
     c90:	d6 81       	ldd	r29, Z+6	; 0x06
     c92:	a6 ed       	ldi	r26, 0xD6	; 214
     c94:	b1 e0       	ldi	r27, 0x01	; 1
     c96:	11 96       	adiw	r26, 0x01	; 1
     c98:	dc 93       	st	X, r29
     c9a:	ce 93       	st	-X, r28
     c9c:	88 ed       	ldi	r24, 0xD8	; 216
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	99 83       	std	Y+1, r25	; 0x01
     ca2:	88 83       	st	Y, r24
     ca4:	85 81       	ldd	r24, Z+5	; 0x05
     ca6:	96 81       	ldd	r25, Z+6	; 0x06
     ca8:	15 96       	adiw	r26, 0x05	; 5
     caa:	9c 93       	st	X, r25
     cac:	8e 93       	st	-X, r24
     cae:	14 97       	sbiw	r26, 0x04	; 4
     cb0:	14 82       	std	Z+4, r1	; 0x04
     cb2:	13 82       	std	Z+3, r1	; 0x03
     cb4:	16 82       	std	Z+6, r1	; 0x06
     cb6:	15 82       	std	Z+5, r1	; 0x05
     cb8:	52 96       	adiw	r26, 0x12	; 18
     cba:	8c 91       	ld	r24, X
     cbc:	52 97       	sbiw	r26, 0x12	; 18
     cbe:	81 50       	subi	r24, 0x01	; 1
     cc0:	52 96       	adiw	r26, 0x12	; 18
     cc2:	8c 93       	st	X, r24
     cc4:	10 86       	std	Z+8, r1	; 0x08
     cc6:	17 82       	std	Z+7, r1	; 0x07
     cc8:	df 91       	pop	r29
     cca:	cf 91       	pop	r28
     ccc:	08 95       	ret

00000cce <refreshTimerList>:
     cce:	8f 92       	push	r8
     cd0:	9f 92       	push	r9
     cd2:	af 92       	push	r10
     cd4:	bf 92       	push	r11
     cd6:	cf 92       	push	r12
     cd8:	df 92       	push	r13
     cda:	ef 92       	push	r14
     cdc:	ff 92       	push	r15
     cde:	0f 93       	push	r16
     ce0:	1f 93       	push	r17
     ce2:	cf 93       	push	r28
     ce4:	df 93       	push	r29
     ce6:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
     cea:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <__data_end+0x1>
     cee:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <__data_end+0x2>
     cf2:	50 91 13 01 	lds	r21, 0x0113	; 0x800113 <__data_end+0x3>
     cf6:	60 91 14 01 	lds	r22, 0x0114	; 0x800114 <__data_end+0x4>
     cfa:	70 91 15 01 	lds	r23, 0x0115	; 0x800115 <__data_end+0x5>
     cfe:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <__data_end+0x6>
     d02:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <__data_end+0x7>
     d06:	a1 e0       	ldi	r26, 0x01	; 1
     d08:	0e 94 b4 0a 	call	0x1568	; 0x1568 <__adddi3_s8>
     d0c:	20 93 10 01 	sts	0x0110, r18	; 0x800110 <__data_end>
     d10:	30 93 11 01 	sts	0x0111, r19	; 0x800111 <__data_end+0x1>
     d14:	40 93 12 01 	sts	0x0112, r20	; 0x800112 <__data_end+0x2>
     d18:	50 93 13 01 	sts	0x0113, r21	; 0x800113 <__data_end+0x3>
     d1c:	60 93 14 01 	sts	0x0114, r22	; 0x800114 <__data_end+0x4>
     d20:	70 93 15 01 	sts	0x0115, r23	; 0x800115 <__data_end+0x5>
     d24:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end+0x6>
     d28:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <__data_end+0x7>
     d2c:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <timerList+0x12>
     d30:	ee 23       	and	r30, r30
     d32:	d9 f1       	breq	.+118    	; 0xdaa <refreshTimerList+0xdc>
     d34:	c0 91 d6 01 	lds	r28, 0x01D6	; 0x8001d6 <timerList>
     d38:	d0 91 d7 01 	lds	r29, 0x01D7	; 0x8001d7 <timerList+0x1>
     d3c:	a8 84       	ldd	r10, Y+8	; 0x08
     d3e:	b9 84       	ldd	r11, Y+9	; 0x09
     d40:	ca 84       	ldd	r12, Y+10	; 0x0a
     d42:	db 84       	ldd	r13, Y+11	; 0x0b
     d44:	ec 84       	ldd	r14, Y+12	; 0x0c
     d46:	fd 84       	ldd	r15, Y+13	; 0x0d
     d48:	0e 85       	ldd	r16, Y+14	; 0x0e
     d4a:	1f 85       	ldd	r17, Y+15	; 0x0f
     d4c:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__cmpdi2>
     d50:	61 f5       	brne	.+88     	; 0xdaa <refreshTimerList+0xdc>
     d52:	0f 2e       	mov	r0, r31
     d54:	f6 ed       	ldi	r31, 0xD6	; 214
     d56:	8f 2e       	mov	r8, r31
     d58:	f1 e0       	ldi	r31, 0x01	; 1
     d5a:	9f 2e       	mov	r9, r31
     d5c:	f0 2d       	mov	r31, r0
     d5e:	8e 81       	ldd	r24, Y+6	; 0x06
     d60:	9f 81       	ldd	r25, Y+7	; 0x07
     d62:	0e 94 44 06 	call	0xc88	; 0xc88 <deleteFromTimerList>
     d66:	8e 81       	ldd	r24, Y+6	; 0x06
     d68:	9f 81       	ldd	r25, Y+7	; 0x07
     d6a:	0e 94 25 05 	call	0xa4a	; 0xa4a <taskAddToReady>
     d6e:	f4 01       	movw	r30, r8
     d70:	c0 81       	ld	r28, Z
     d72:	d1 81       	ldd	r29, Z+1	; 0x01
     d74:	28 85       	ldd	r18, Y+8	; 0x08
     d76:	39 85       	ldd	r19, Y+9	; 0x09
     d78:	4a 85       	ldd	r20, Y+10	; 0x0a
     d7a:	5b 85       	ldd	r21, Y+11	; 0x0b
     d7c:	6c 85       	ldd	r22, Y+12	; 0x0c
     d7e:	7d 85       	ldd	r23, Y+13	; 0x0d
     d80:	a0 90 10 01 	lds	r10, 0x0110	; 0x800110 <__data_end>
     d84:	b0 90 11 01 	lds	r11, 0x0111	; 0x800111 <__data_end+0x1>
     d88:	c0 90 12 01 	lds	r12, 0x0112	; 0x800112 <__data_end+0x2>
     d8c:	d0 90 13 01 	lds	r13, 0x0113	; 0x800113 <__data_end+0x3>
     d90:	e0 90 14 01 	lds	r14, 0x0114	; 0x800114 <__data_end+0x4>
     d94:	f0 90 15 01 	lds	r15, 0x0115	; 0x800115 <__data_end+0x5>
     d98:	00 91 16 01 	lds	r16, 0x0116	; 0x800116 <__data_end+0x6>
     d9c:	10 91 17 01 	lds	r17, 0x0117	; 0x800117 <__data_end+0x7>
     da0:	8e 85       	ldd	r24, Y+14	; 0x0e
     da2:	9f 85       	ldd	r25, Y+15	; 0x0f
     da4:	0e 94 c0 0a 	call	0x1580	; 0x1580 <__cmpdi2>
     da8:	d1 f2       	breq	.-76     	; 0xd5e <refreshTimerList+0x90>
     daa:	df 91       	pop	r29
     dac:	cf 91       	pop	r28
     dae:	1f 91       	pop	r17
     db0:	0f 91       	pop	r16
     db2:	ff 90       	pop	r15
     db4:	ef 90       	pop	r14
     db6:	df 90       	pop	r13
     db8:	cf 90       	pop	r12
     dba:	bf 90       	pop	r11
     dbc:	af 90       	pop	r10
     dbe:	9f 90       	pop	r9
     dc0:	8f 90       	pop	r8
     dc2:	08 95       	ret

00000dc4 <scheduler>:
}
	
__attribute__((naked)) void scheduler(void )
{
	asm("cli");
     dc4:	f8 94       	cli
	asm("push r0");
     dc6:	0f 92       	push	r0
	asm("in r0 , 0x3f");
     dc8:	0f b6       	in	r0, 0x3f	; 63
	asm("push r0");
     dca:	0f 92       	push	r0
	asm("push r1");
     dcc:	1f 92       	push	r1
	asm("push r2");
     dce:	2f 92       	push	r2
	asm("push r3");
     dd0:	3f 92       	push	r3
	asm("push r4");
     dd2:	4f 92       	push	r4
	asm("push r5");
     dd4:	5f 92       	push	r5
	asm("push r6");
     dd6:	6f 92       	push	r6
	asm("push r7");
     dd8:	7f 92       	push	r7
	asm("push r8");
     dda:	8f 92       	push	r8
	asm("push r9");
     ddc:	9f 92       	push	r9
	asm("push r10");
     dde:	af 92       	push	r10
	asm("push r11");
     de0:	bf 92       	push	r11
	asm("push r12");
     de2:	cf 92       	push	r12
	asm("push r13");
     de4:	df 92       	push	r13
	asm("push r14");
     de6:	ef 92       	push	r14
	asm("push r15");
     de8:	ff 92       	push	r15
	asm("push r16");
     dea:	0f 93       	push	r16
	asm("push r17");
     dec:	1f 93       	push	r17
	asm("push r18");
     dee:	2f 93       	push	r18
	asm("push r19");
     df0:	3f 93       	push	r19
	asm("push r20");
     df2:	4f 93       	push	r20
	asm("push r21");
     df4:	5f 93       	push	r21
	asm("push r22");
     df6:	6f 93       	push	r22
	asm("push r23");
     df8:	7f 93       	push	r23
	asm("push r24");
     dfa:	8f 93       	push	r24
	asm("push r25");
     dfc:	9f 93       	push	r25
	asm("push r26");
     dfe:	af 93       	push	r26
	asm("push r27");
     e00:	bf 93       	push	r27
	asm("push r28");
     e02:	cf 93       	push	r28
	asm("push r29");
     e04:	df 93       	push	r29
	asm("push r30");
     e06:	ef 93       	push	r30
	asm("push r31");
     e08:	ff 93       	push	r31
	asm("call getRunning");
     e0a:	0e 94 86 04 	call	0x90c	; 0x90c <getRunning>
	asm("mov XL , r24");
     e0e:	a8 2f       	mov	r26, r24
	asm("mov XH , r25");
     e10:	b9 2f       	mov	r27, r25
	asm("in r0 , 0x3d");
     e12:	0d b6       	in	r0, 0x3d	; 61
	asm("in r1 , 0x3e");
     e14:	1e b6       	in	r1, 0x3e	; 62
	asm("st X+ , r0");
     e16:	0d 92       	st	X+, r0
	asm("st X , r1");
     e18:	1c 92       	st	X, r1
	//;
	//;
	//;
	//;;Now , load Next context;;
	
	asm("ldi r16 , 0");
     e1a:	00 e0       	ldi	r16, 0x00	; 0
	asm("mov r1 , r16");
     e1c:	10 2e       	mov	r1, r16
	asm("call getNext");
     e1e:	0e 94 8d 04 	call	0x91a	; 0x91a <getNext>
	asm("mov XL , r24");
     e22:	a8 2f       	mov	r26, r24
	asm("mov XH , r25");
     e24:	b9 2f       	mov	r27, r25
	asm("ld r0 , X+");
     e26:	0d 90       	ld	r0, X+
	asm("ld r1 , X");
     e28:	1c 90       	ld	r1, X
	asm("out 0x3d, r0");
     e2a:	0d be       	out	0x3d, r0	; 61
	asm("out	0x3e , r1");
     e2c:	1e be       	out	0x3e, r1	; 62
	asm("nop");
     e2e:	00 00       	nop
	asm("pop r31");
     e30:	ff 91       	pop	r31
	asm("pop r30");
     e32:	ef 91       	pop	r30
	asm("pop r29");
     e34:	df 91       	pop	r29
	asm("pop r28");
     e36:	cf 91       	pop	r28
	asm("pop r27");
     e38:	bf 91       	pop	r27
	asm("pop r26");
     e3a:	af 91       	pop	r26
	asm("pop r25");
     e3c:	9f 91       	pop	r25
	asm("pop r24");
     e3e:	8f 91       	pop	r24
	asm("pop r23");
     e40:	7f 91       	pop	r23
	asm("pop r22");
     e42:	6f 91       	pop	r22
	asm("pop r21");
     e44:	5f 91       	pop	r21
	asm("pop r20");
     e46:	4f 91       	pop	r20
	asm("pop r19");
     e48:	3f 91       	pop	r19
	asm("pop r18");
     e4a:	2f 91       	pop	r18
	asm("pop r17");
     e4c:	1f 91       	pop	r17
	asm("pop r16");
     e4e:	0f 91       	pop	r16
	asm("pop r15");
     e50:	ff 90       	pop	r15
	asm("pop r14");
     e52:	ef 90       	pop	r14
	asm("pop r13");
     e54:	df 90       	pop	r13
	asm("pop r12");
     e56:	cf 90       	pop	r12
	asm("pop r11");
     e58:	bf 90       	pop	r11
	asm("pop r10");
     e5a:	af 90       	pop	r10
	asm("pop r9");
     e5c:	9f 90       	pop	r9
	asm("pop r8");
     e5e:	8f 90       	pop	r8
	asm("pop r7");
     e60:	7f 90       	pop	r7
	asm("pop r6");
     e62:	6f 90       	pop	r6
	asm("pop r5");
     e64:	5f 90       	pop	r5
	asm("pop r4");
     e66:	4f 90       	pop	r4
	asm("pop r3");
     e68:	3f 90       	pop	r3
	asm("pop r2");
     e6a:	2f 90       	pop	r2
	asm("pop r1");
     e6c:	1f 90       	pop	r1
	asm("pop r0");
     e6e:	0f 90       	pop	r0
	asm("out 0x3f , r0");
     e70:	0f be       	out	0x3f, r0	; 63
	asm("pop r0");
     e72:	0f 90       	pop	r0
	asm("reti");
     e74:	18 95       	reti

00000e76 <ledToggle>:
uint8_t wait = 0;


void ledToggle(void )
	{
		PORTA^=(1<<4);
     e76:	9b b3       	in	r25, 0x1b	; 27
     e78:	80 e1       	ldi	r24, 0x10	; 16
     e7a:	89 27       	eor	r24, r25
     e7c:	8b bb       	out	0x1b, r24	; 27
     e7e:	08 95       	ret

00000e80 <ledToggle2>:
	}
	
void ledToggle2(void )
{
	PORTA^=(1<<5);
     e80:	9b b3       	in	r25, 0x1b	; 27
     e82:	80 e2       	ldi	r24, 0x20	; 32
     e84:	89 27       	eor	r24, r25
     e86:	8b bb       	out	0x1b, r24	; 27
     e88:	08 95       	ret

00000e8a <ledToggle3>:
}

void ledToggle3(void )
{
	PORTA^=(1<<6);
     e8a:	9b b3       	in	r25, 0x1b	; 27
     e8c:	80 e4       	ldi	r24, 0x40	; 64
     e8e:	89 27       	eor	r24, r25
     e90:	8b bb       	out	0x1b, r24	; 27
     e92:	08 95       	ret

00000e94 <ledToggle4>:
}

void ledToggle4(void )
{
	PORTA^=(1<<7);
     e94:	8b b3       	in	r24, 0x1b	; 27
     e96:	80 58       	subi	r24, 0x80	; 128
     e98:	8b bb       	out	0x1b, r24	; 27
     e9a:	08 95       	ret

00000e9c <task1func>:
    }
}

void task1func(void )
{
	uint8_t flag = 0;
     e9c:	c0 e0       	ldi	r28, 0x00	; 0
     e9e:	0f 2e       	mov	r0, r31
     ea0:	f2 e3       	ldi	r31, 0x32	; 50
     ea2:	cf 2e       	mov	r12, r31
     ea4:	d1 2c       	mov	r13, r1
     ea6:	e1 2c       	mov	r14, r1
     ea8:	f1 2c       	mov	r15, r1
     eaa:	f0 2d       	mov	r31, r0
	while(1)
	{
		for(i = 0 ; i < LOOP; i++);
		flag++;
		if(flag%10 == 0)
     eac:	dd ec       	ldi	r29, 0xCD	; 205
    }
}

void task1func(void )
{
	uint8_t flag = 0;
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	01 96       	adiw	r24, 0x01	; 1
	while(1)
	{
		for(i = 0 ; i < LOOP; i++);
     eb4:	82 33       	cpi	r24, 0x32	; 50
     eb6:	91 05       	cpc	r25, r1
     eb8:	e1 f7       	brne	.-8      	; 0xeb2 <task1func+0x16>
     eba:	c0 92 b7 03 	sts	0x03B7, r12	; 0x8003b7 <i>
     ebe:	d0 92 b8 03 	sts	0x03B8, r13	; 0x8003b8 <i+0x1>
     ec2:	e0 92 b9 03 	sts	0x03B9, r14	; 0x8003b9 <i+0x2>
     ec6:	f0 92 ba 03 	sts	0x03BA, r15	; 0x8003ba <i+0x3>
		flag++;
     eca:	cf 5f       	subi	r28, 0xFF	; 255
		if(flag%10 == 0)
     ecc:	cd 9f       	mul	r28, r29
     ece:	81 2d       	mov	r24, r1
     ed0:	11 24       	eor	r1, r1
     ed2:	86 95       	lsr	r24
     ed4:	86 95       	lsr	r24
     ed6:	86 95       	lsr	r24
     ed8:	88 0f       	add	r24, r24
     eda:	98 2f       	mov	r25, r24
     edc:	99 0f       	add	r25, r25
     ede:	99 0f       	add	r25, r25
     ee0:	89 0f       	add	r24, r25
     ee2:	c8 13       	cpse	r28, r24
     ee4:	e4 cf       	rjmp	.-56     	; 0xeae <task1func+0x12>
		{
				if(mutexTake(&mutex1 , 5000) == PASS)
     ee6:	08 e8       	ldi	r16, 0x88	; 136
     ee8:	13 e1       	ldi	r17, 0x13	; 19
     eea:	20 e0       	ldi	r18, 0x00	; 0
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	40 e0       	ldi	r20, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	70 e0       	ldi	r23, 0x00	; 0
     ef6:	8d ea       	ldi	r24, 0xAD	; 173
     ef8:	96 e0       	ldi	r25, 0x06	; 6
     efa:	0e 94 c5 01 	call	0x38a	; 0x38a <mutexTake>
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	b1 f6       	brne	.-84     	; 0xeae <task1func+0x12>
				{
					LCD_String("****Thread1*****");
     f02:	86 e6       	ldi	r24, 0x66	; 102
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_String>
					mutexRelease(&mutex1);
     f0a:	8d ea       	ldi	r24, 0xAD	; 173
     f0c:	96 e0       	ldi	r25, 0x06	; 6
     f0e:	0e 94 4e 02 	call	0x49c	; 0x49c <mutexRelease>
     f12:	cd cf       	rjmp	.-102    	; 0xeae <task1func+0x12>

00000f14 <task2func>:
	}


void task2func(void )
{
	uint8_t flag = 0;
     f14:	c0 e0       	ldi	r28, 0x00	; 0
     f16:	0f 2e       	mov	r0, r31
     f18:	f2 e3       	ldi	r31, 0x32	; 50
     f1a:	cf 2e       	mov	r12, r31
     f1c:	d1 2c       	mov	r13, r1
     f1e:	e1 2c       	mov	r14, r1
     f20:	f1 2c       	mov	r15, r1
     f22:	f0 2d       	mov	r31, r0
		for(j = 0 ; j < LOOP ; j++);
		flag++;
		/*
		 *Task2 delete itself every 10 Toggels
		 */
		if(flag%10 == 0)
     f24:	dd ec       	ldi	r29, 0xCD	; 205
	}


void task2func(void )
{
	uint8_t flag = 0;
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	01 96       	adiw	r24, 0x01	; 1
	while(1)
	{
		for(j = 0 ; j < LOOP ; j++);
     f2c:	82 33       	cpi	r24, 0x32	; 50
     f2e:	91 05       	cpc	r25, r1
     f30:	e1 f7       	brne	.-8      	; 0xf2a <task2func+0x16>
     f32:	c0 92 d1 02 	sts	0x02D1, r12	; 0x8002d1 <j>
     f36:	d0 92 d2 02 	sts	0x02D2, r13	; 0x8002d2 <j+0x1>
     f3a:	e0 92 d3 02 	sts	0x02D3, r14	; 0x8002d3 <j+0x2>
     f3e:	f0 92 d4 02 	sts	0x02D4, r15	; 0x8002d4 <j+0x3>
		flag++;
     f42:	cf 5f       	subi	r28, 0xFF	; 255
		/*
		 *Task2 delete itself every 10 Toggels
		 */
		if(flag%10 == 0)
     f44:	cd 9f       	mul	r28, r29
     f46:	81 2d       	mov	r24, r1
     f48:	11 24       	eor	r1, r1
     f4a:	86 95       	lsr	r24
     f4c:	86 95       	lsr	r24
     f4e:	86 95       	lsr	r24
     f50:	88 0f       	add	r24, r24
     f52:	98 2f       	mov	r25, r24
     f54:	99 0f       	add	r25, r25
     f56:	99 0f       	add	r25, r25
     f58:	89 0f       	add	r24, r25
     f5a:	c8 13       	cpse	r28, r24
     f5c:	e4 cf       	rjmp	.-56     	; 0xf26 <task2func+0x12>
		{
				if(mutexTake(&mutex1 , 5000) == PASS)
     f5e:	08 e8       	ldi	r16, 0x88	; 136
     f60:	13 e1       	ldi	r17, 0x13	; 19
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	8d ea       	ldi	r24, 0xAD	; 173
     f70:	96 e0       	ldi	r25, 0x06	; 6
     f72:	0e 94 c5 01 	call	0x38a	; 0x38a <mutexTake>
     f76:	81 30       	cpi	r24, 0x01	; 1
     f78:	b1 f6       	brne	.-84     	; 0xf26 <task2func+0x12>
				{
					LCD_String("****Thread2*****");
     f7a:	87 e7       	ldi	r24, 0x77	; 119
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_String>
					mutexRelease(&mutex1);
     f82:	8d ea       	ldi	r24, 0xAD	; 173
     f84:	96 e0       	ldi	r25, 0x06	; 6
     f86:	0e 94 4e 02 	call	0x49c	; 0x49c <mutexRelease>
     f8a:	cd cf       	rjmp	.-102    	; 0xf26 <task2func+0x12>

00000f8c <task3func>:

	}

void task3func(void )
{
	uint8_t flag = 0;
     f8c:	c0 e0       	ldi	r28, 0x00	; 0
     f8e:	0f 2e       	mov	r0, r31
     f90:	f2 e3       	ldi	r31, 0x32	; 50
     f92:	cf 2e       	mov	r12, r31
     f94:	d1 2c       	mov	r13, r1
     f96:	e1 2c       	mov	r14, r1
     f98:	f1 2c       	mov	r15, r1
     f9a:	f0 2d       	mov	r31, r0
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
		flag++;
		
		if(flag%10 == 0)
     f9c:	dd ec       	ldi	r29, 0xCD	; 205

	}

void task3func(void )
{
	uint8_t flag = 0;
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	01 96       	adiw	r24, 0x01	; 1
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
     fa4:	82 33       	cpi	r24, 0x32	; 50
     fa6:	91 05       	cpc	r25, r1
     fa8:	e1 f7       	brne	.-8      	; 0xfa2 <task3func+0x16>
     faa:	c0 92 d5 02 	sts	0x02D5, r12	; 0x8002d5 <k>
     fae:	d0 92 d6 02 	sts	0x02D6, r13	; 0x8002d6 <k+0x1>
     fb2:	e0 92 d7 02 	sts	0x02D7, r14	; 0x8002d7 <k+0x2>
     fb6:	f0 92 d8 02 	sts	0x02D8, r15	; 0x8002d8 <k+0x3>
		flag++;
     fba:	cf 5f       	subi	r28, 0xFF	; 255
		
		if(flag%10 == 0)
     fbc:	cd 9f       	mul	r28, r29
     fbe:	81 2d       	mov	r24, r1
     fc0:	11 24       	eor	r1, r1
     fc2:	86 95       	lsr	r24
     fc4:	86 95       	lsr	r24
     fc6:	86 95       	lsr	r24
     fc8:	88 0f       	add	r24, r24
     fca:	98 2f       	mov	r25, r24
     fcc:	99 0f       	add	r25, r25
     fce:	99 0f       	add	r25, r25
     fd0:	89 0f       	add	r24, r25
     fd2:	c8 13       	cpse	r28, r24
     fd4:	e4 cf       	rjmp	.-56     	; 0xf9e <task3func+0x12>
			{
				if(mutexTake(&mutex1 , 5000) == PASS)
     fd6:	08 e8       	ldi	r16, 0x88	; 136
     fd8:	13 e1       	ldi	r17, 0x13	; 19
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	50 e0       	ldi	r21, 0x00	; 0
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	8d ea       	ldi	r24, 0xAD	; 173
     fe8:	96 e0       	ldi	r25, 0x06	; 6
     fea:	0e 94 c5 01 	call	0x38a	; 0x38a <mutexTake>
     fee:	81 30       	cpi	r24, 0x01	; 1
     ff0:	b1 f6       	brne	.-84     	; 0xf9e <task3func+0x12>
				{
				LCD_String("****Thread3*****");
     ff2:	88 e8       	ldi	r24, 0x88	; 136
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_String>
				mutexRelease(&mutex1);
     ffa:	8d ea       	ldi	r24, 0xAD	; 173
     ffc:	96 e0       	ldi	r25, 0x06	; 6
     ffe:	0e 94 4e 02 	call	0x49c	; 0x49c <mutexRelease>
    1002:	cd cf       	rjmp	.-102    	; 0xf9e <task3func+0x12>

00001004 <task4func>:
		}
	}
	
void task4func(void )
{
	uint8_t flag = 0;
    1004:	c0 e0       	ldi	r28, 0x00	; 0
    1006:	0f 2e       	mov	r0, r31
    1008:	f2 e3       	ldi	r31, 0x32	; 50
    100a:	cf 2e       	mov	r12, r31
    100c:	d1 2c       	mov	r13, r1
    100e:	e1 2c       	mov	r14, r1
    1010:	f1 2c       	mov	r15, r1
    1012:	f0 2d       	mov	r31, r0
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
		flag++;
		
		if(flag%10 == 0)
    1014:	dd ec       	ldi	r29, 0xCD	; 205
		}
	}
	
void task4func(void )
{
	uint8_t flag = 0;
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	01 96       	adiw	r24, 0x01	; 1
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
    101c:	82 33       	cpi	r24, 0x32	; 50
    101e:	91 05       	cpc	r25, r1
    1020:	e1 f7       	brne	.-8      	; 0x101a <task4func+0x16>
    1022:	c0 92 d5 02 	sts	0x02D5, r12	; 0x8002d5 <k>
    1026:	d0 92 d6 02 	sts	0x02D6, r13	; 0x8002d6 <k+0x1>
    102a:	e0 92 d7 02 	sts	0x02D7, r14	; 0x8002d7 <k+0x2>
    102e:	f0 92 d8 02 	sts	0x02D8, r15	; 0x8002d8 <k+0x3>
		flag++;
    1032:	cf 5f       	subi	r28, 0xFF	; 255
		
		if(flag%10 == 0)
    1034:	cd 9f       	mul	r28, r29
    1036:	81 2d       	mov	r24, r1
    1038:	11 24       	eor	r1, r1
    103a:	86 95       	lsr	r24
    103c:	86 95       	lsr	r24
    103e:	86 95       	lsr	r24
    1040:	88 0f       	add	r24, r24
    1042:	98 2f       	mov	r25, r24
    1044:	99 0f       	add	r25, r25
    1046:	99 0f       	add	r25, r25
    1048:	89 0f       	add	r24, r25
    104a:	c8 13       	cpse	r28, r24
    104c:	e4 cf       	rjmp	.-56     	; 0x1016 <task4func+0x12>
		{
			if(mutexTake(&mutex1 , 5000) == PASS)
    104e:	08 e8       	ldi	r16, 0x88	; 136
    1050:	13 e1       	ldi	r17, 0x13	; 19
    1052:	20 e0       	ldi	r18, 0x00	; 0
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	40 e0       	ldi	r20, 0x00	; 0
    1058:	50 e0       	ldi	r21, 0x00	; 0
    105a:	60 e0       	ldi	r22, 0x00	; 0
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	8d ea       	ldi	r24, 0xAD	; 173
    1060:	96 e0       	ldi	r25, 0x06	; 6
    1062:	0e 94 c5 01 	call	0x38a	; 0x38a <mutexTake>
    1066:	81 30       	cpi	r24, 0x01	; 1
    1068:	b1 f6       	brne	.-84     	; 0x1016 <task4func+0x12>
			{
				LCD_String("****Thread4*****");
    106a:	89 e9       	ldi	r24, 0x99	; 153
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_String>
				mutexRelease(&mutex1);
    1072:	8d ea       	ldi	r24, 0xAD	; 173
    1074:	96 e0       	ldi	r25, 0x06	; 6
    1076:	0e 94 4e 02 	call	0x49c	; 0x49c <mutexRelease>
    107a:	cd cf       	rjmp	.-102    	; 0x1016 <task4func+0x12>

0000107c <task5func>:
	}
}

void task5func(void )
{
	uint8_t flag = 0;
    107c:	c0 e0       	ldi	r28, 0x00	; 0
    107e:	0f 2e       	mov	r0, r31
    1080:	f2 e3       	ldi	r31, 0x32	; 50
    1082:	cf 2e       	mov	r12, r31
    1084:	d1 2c       	mov	r13, r1
    1086:	e1 2c       	mov	r14, r1
    1088:	f1 2c       	mov	r15, r1
    108a:	f0 2d       	mov	r31, r0
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
		flag++;
		
		if(flag%10 == 0)
    108c:	dd ec       	ldi	r29, 0xCD	; 205
	}
}

void task5func(void )
{
	uint8_t flag = 0;
    108e:	80 e0       	ldi	r24, 0x00	; 0
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	01 96       	adiw	r24, 0x01	; 1
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
    1094:	82 33       	cpi	r24, 0x32	; 50
    1096:	91 05       	cpc	r25, r1
    1098:	e1 f7       	brne	.-8      	; 0x1092 <task5func+0x16>
    109a:	c0 92 d5 02 	sts	0x02D5, r12	; 0x8002d5 <k>
    109e:	d0 92 d6 02 	sts	0x02D6, r13	; 0x8002d6 <k+0x1>
    10a2:	e0 92 d7 02 	sts	0x02D7, r14	; 0x8002d7 <k+0x2>
    10a6:	f0 92 d8 02 	sts	0x02D8, r15	; 0x8002d8 <k+0x3>
		flag++;
    10aa:	cf 5f       	subi	r28, 0xFF	; 255
		
		if(flag%10 == 0)
    10ac:	cd 9f       	mul	r28, r29
    10ae:	81 2d       	mov	r24, r1
    10b0:	11 24       	eor	r1, r1
    10b2:	86 95       	lsr	r24
    10b4:	86 95       	lsr	r24
    10b6:	86 95       	lsr	r24
    10b8:	88 0f       	add	r24, r24
    10ba:	98 2f       	mov	r25, r24
    10bc:	99 0f       	add	r25, r25
    10be:	99 0f       	add	r25, r25
    10c0:	89 0f       	add	r24, r25
    10c2:	c8 13       	cpse	r28, r24
    10c4:	e4 cf       	rjmp	.-56     	; 0x108e <task5func+0x12>
		{
			if(mutexTake(&mutex1 , 5000) == PASS)
    10c6:	08 e8       	ldi	r16, 0x88	; 136
    10c8:	13 e1       	ldi	r17, 0x13	; 19
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	8d ea       	ldi	r24, 0xAD	; 173
    10d8:	96 e0       	ldi	r25, 0x06	; 6
    10da:	0e 94 c5 01 	call	0x38a	; 0x38a <mutexTake>
    10de:	81 30       	cpi	r24, 0x01	; 1
    10e0:	b1 f6       	brne	.-84     	; 0x108e <task5func+0x12>
			{
				LCD_String("****Thread5*****");
    10e2:	8a ea       	ldi	r24, 0xAA	; 170
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_String>
				mutexRelease(&mutex1);
    10ea:	8d ea       	ldi	r24, 0xAD	; 173
    10ec:	96 e0       	ldi	r25, 0x06	; 6
    10ee:	0e 94 4e 02 	call	0x49c	; 0x49c <mutexRelease>
    10f2:	cd cf       	rjmp	.-102    	; 0x108e <task5func+0x12>

000010f4 <task6func>:
	}
}

void task6func(void )
{
	uint8_t flag = 0;
    10f4:	c0 e0       	ldi	r28, 0x00	; 0
    10f6:	0f 2e       	mov	r0, r31
    10f8:	f2 e3       	ldi	r31, 0x32	; 50
    10fa:	cf 2e       	mov	r12, r31
    10fc:	d1 2c       	mov	r13, r1
    10fe:	e1 2c       	mov	r14, r1
    1100:	f1 2c       	mov	r15, r1
    1102:	f0 2d       	mov	r31, r0
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
		flag++;
		
		if(flag%10 == 0)
    1104:	dd ec       	ldi	r29, 0xCD	; 205
	}
}

void task6func(void )
{
	uint8_t flag = 0;
    1106:	80 e0       	ldi	r24, 0x00	; 0
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	01 96       	adiw	r24, 0x01	; 1
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
    110c:	82 33       	cpi	r24, 0x32	; 50
    110e:	91 05       	cpc	r25, r1
    1110:	e1 f7       	brne	.-8      	; 0x110a <task6func+0x16>
    1112:	c0 92 d5 02 	sts	0x02D5, r12	; 0x8002d5 <k>
    1116:	d0 92 d6 02 	sts	0x02D6, r13	; 0x8002d6 <k+0x1>
    111a:	e0 92 d7 02 	sts	0x02D7, r14	; 0x8002d7 <k+0x2>
    111e:	f0 92 d8 02 	sts	0x02D8, r15	; 0x8002d8 <k+0x3>
		flag++;
    1122:	cf 5f       	subi	r28, 0xFF	; 255
		
		if(flag%10 == 0)
    1124:	cd 9f       	mul	r28, r29
    1126:	81 2d       	mov	r24, r1
    1128:	11 24       	eor	r1, r1
    112a:	86 95       	lsr	r24
    112c:	86 95       	lsr	r24
    112e:	86 95       	lsr	r24
    1130:	88 0f       	add	r24, r24
    1132:	98 2f       	mov	r25, r24
    1134:	99 0f       	add	r25, r25
    1136:	99 0f       	add	r25, r25
    1138:	89 0f       	add	r24, r25
    113a:	c8 13       	cpse	r28, r24
    113c:	e4 cf       	rjmp	.-56     	; 0x1106 <task6func+0x12>
		{
			if(mutexTake(&mutex1 , 5000) == PASS)
    113e:	08 e8       	ldi	r16, 0x88	; 136
    1140:	13 e1       	ldi	r17, 0x13	; 19
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	50 e0       	ldi	r21, 0x00	; 0
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	8d ea       	ldi	r24, 0xAD	; 173
    1150:	96 e0       	ldi	r25, 0x06	; 6
    1152:	0e 94 c5 01 	call	0x38a	; 0x38a <mutexTake>
    1156:	81 30       	cpi	r24, 0x01	; 1
    1158:	b1 f6       	brne	.-84     	; 0x1106 <task6func+0x12>
			{
				LCD_String("****Thread6*****");
    115a:	8b eb       	ldi	r24, 0xBB	; 187
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_String>
				mutexRelease(&mutex1);
    1162:	8d ea       	ldi	r24, 0xAD	; 173
    1164:	96 e0       	ldi	r25, 0x06	; 6
    1166:	0e 94 4e 02 	call	0x49c	; 0x49c <mutexRelease>
    116a:	cd cf       	rjmp	.-102    	; 0x1106 <task6func+0x12>

0000116c <task7func>:
	}
}

void task7func(void )
{
	uint8_t flag = 0;
    116c:	c0 e0       	ldi	r28, 0x00	; 0
    116e:	0f 2e       	mov	r0, r31
    1170:	f2 e3       	ldi	r31, 0x32	; 50
    1172:	cf 2e       	mov	r12, r31
    1174:	d1 2c       	mov	r13, r1
    1176:	e1 2c       	mov	r14, r1
    1178:	f1 2c       	mov	r15, r1
    117a:	f0 2d       	mov	r31, r0
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
		flag++;
		
		if(flag%10 == 0)
    117c:	dd ec       	ldi	r29, 0xCD	; 205
	}
}

void task7func(void )
{
	uint8_t flag = 0;
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	01 96       	adiw	r24, 0x01	; 1
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
    1184:	82 33       	cpi	r24, 0x32	; 50
    1186:	91 05       	cpc	r25, r1
    1188:	e1 f7       	brne	.-8      	; 0x1182 <task7func+0x16>
    118a:	c0 92 d5 02 	sts	0x02D5, r12	; 0x8002d5 <k>
    118e:	d0 92 d6 02 	sts	0x02D6, r13	; 0x8002d6 <k+0x1>
    1192:	e0 92 d7 02 	sts	0x02D7, r14	; 0x8002d7 <k+0x2>
    1196:	f0 92 d8 02 	sts	0x02D8, r15	; 0x8002d8 <k+0x3>
		flag++;
    119a:	cf 5f       	subi	r28, 0xFF	; 255
		
		if(flag%10 == 0)
    119c:	cd 9f       	mul	r28, r29
    119e:	81 2d       	mov	r24, r1
    11a0:	11 24       	eor	r1, r1
    11a2:	86 95       	lsr	r24
    11a4:	86 95       	lsr	r24
    11a6:	86 95       	lsr	r24
    11a8:	88 0f       	add	r24, r24
    11aa:	98 2f       	mov	r25, r24
    11ac:	99 0f       	add	r25, r25
    11ae:	99 0f       	add	r25, r25
    11b0:	89 0f       	add	r24, r25
    11b2:	c8 13       	cpse	r28, r24
    11b4:	e4 cf       	rjmp	.-56     	; 0x117e <task7func+0x12>
		{
			if(mutexTake(&mutex1 , 5000) == PASS)
    11b6:	08 e8       	ldi	r16, 0x88	; 136
    11b8:	13 e1       	ldi	r17, 0x13	; 19
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	50 e0       	ldi	r21, 0x00	; 0
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	8d ea       	ldi	r24, 0xAD	; 173
    11c8:	96 e0       	ldi	r25, 0x06	; 6
    11ca:	0e 94 c5 01 	call	0x38a	; 0x38a <mutexTake>
    11ce:	81 30       	cpi	r24, 0x01	; 1
    11d0:	b1 f6       	brne	.-84     	; 0x117e <task7func+0x12>
			{
				LCD_String("****Thread7*****");
    11d2:	8c ec       	ldi	r24, 0xCC	; 204
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_String>
				mutexRelease(&mutex1);
    11da:	8d ea       	ldi	r24, 0xAD	; 173
    11dc:	96 e0       	ldi	r25, 0x06	; 6
    11de:	0e 94 4e 02 	call	0x49c	; 0x49c <mutexRelease>
    11e2:	cd cf       	rjmp	.-102    	; 0x117e <task7func+0x12>

000011e4 <task8func>:
	}
}

void task8func(void )
{
	uint8_t flag = 0;
    11e4:	c0 e0       	ldi	r28, 0x00	; 0
    11e6:	0f 2e       	mov	r0, r31
    11e8:	f2 e3       	ldi	r31, 0x32	; 50
    11ea:	cf 2e       	mov	r12, r31
    11ec:	d1 2c       	mov	r13, r1
    11ee:	e1 2c       	mov	r14, r1
    11f0:	f1 2c       	mov	r15, r1
    11f2:	f0 2d       	mov	r31, r0
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
		flag++;
		
		if(flag%10 == 0)
    11f4:	dd ec       	ldi	r29, 0xCD	; 205
	}
}

void task8func(void )
{
	uint8_t flag = 0;
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	01 96       	adiw	r24, 0x01	; 1
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
    11fc:	82 33       	cpi	r24, 0x32	; 50
    11fe:	91 05       	cpc	r25, r1
    1200:	e1 f7       	brne	.-8      	; 0x11fa <task8func+0x16>
    1202:	c0 92 d5 02 	sts	0x02D5, r12	; 0x8002d5 <k>
    1206:	d0 92 d6 02 	sts	0x02D6, r13	; 0x8002d6 <k+0x1>
    120a:	e0 92 d7 02 	sts	0x02D7, r14	; 0x8002d7 <k+0x2>
    120e:	f0 92 d8 02 	sts	0x02D8, r15	; 0x8002d8 <k+0x3>
		flag++;
    1212:	cf 5f       	subi	r28, 0xFF	; 255
		
		if(flag%10 == 0)
    1214:	cd 9f       	mul	r28, r29
    1216:	81 2d       	mov	r24, r1
    1218:	11 24       	eor	r1, r1
    121a:	86 95       	lsr	r24
    121c:	86 95       	lsr	r24
    121e:	86 95       	lsr	r24
    1220:	88 0f       	add	r24, r24
    1222:	98 2f       	mov	r25, r24
    1224:	99 0f       	add	r25, r25
    1226:	99 0f       	add	r25, r25
    1228:	89 0f       	add	r24, r25
    122a:	c8 13       	cpse	r28, r24
    122c:	e4 cf       	rjmp	.-56     	; 0x11f6 <task8func+0x12>
		{
			if(mutexTake(&mutex1 , 5000) == PASS)
    122e:	08 e8       	ldi	r16, 0x88	; 136
    1230:	13 e1       	ldi	r17, 0x13	; 19
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	40 e0       	ldi	r20, 0x00	; 0
    1238:	50 e0       	ldi	r21, 0x00	; 0
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	8d ea       	ldi	r24, 0xAD	; 173
    1240:	96 e0       	ldi	r25, 0x06	; 6
    1242:	0e 94 c5 01 	call	0x38a	; 0x38a <mutexTake>
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	b1 f6       	brne	.-84     	; 0x11f6 <task8func+0x12>
			{
				LCD_String("****Thread8*****");
    124a:	8d ed       	ldi	r24, 0xDD	; 221
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_String>
				mutexRelease(&mutex1);
    1252:	8d ea       	ldi	r24, 0xAD	; 173
    1254:	96 e0       	ldi	r25, 0x06	; 6
    1256:	0e 94 4e 02 	call	0x49c	; 0x49c <mutexRelease>
    125a:	cd cf       	rjmp	.-102    	; 0x11f6 <task8func+0x12>

0000125c <task9func>:
	}
}

void task9func(void )
{
	uint8_t flag = 0;
    125c:	c0 e0       	ldi	r28, 0x00	; 0
    125e:	0f 2e       	mov	r0, r31
    1260:	f2 e3       	ldi	r31, 0x32	; 50
    1262:	cf 2e       	mov	r12, r31
    1264:	d1 2c       	mov	r13, r1
    1266:	e1 2c       	mov	r14, r1
    1268:	f1 2c       	mov	r15, r1
    126a:	f0 2d       	mov	r31, r0
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
		flag++;
		
		if(flag%10 == 0)
    126c:	dd ec       	ldi	r29, 0xCD	; 205
	}
}

void task9func(void )
{
	uint8_t flag = 0;
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	01 96       	adiw	r24, 0x01	; 1
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
    1274:	82 33       	cpi	r24, 0x32	; 50
    1276:	91 05       	cpc	r25, r1
    1278:	e1 f7       	brne	.-8      	; 0x1272 <task9func+0x16>
    127a:	c0 92 d5 02 	sts	0x02D5, r12	; 0x8002d5 <k>
    127e:	d0 92 d6 02 	sts	0x02D6, r13	; 0x8002d6 <k+0x1>
    1282:	e0 92 d7 02 	sts	0x02D7, r14	; 0x8002d7 <k+0x2>
    1286:	f0 92 d8 02 	sts	0x02D8, r15	; 0x8002d8 <k+0x3>
		flag++;
    128a:	cf 5f       	subi	r28, 0xFF	; 255
		
		if(flag%10 == 0)
    128c:	cd 9f       	mul	r28, r29
    128e:	81 2d       	mov	r24, r1
    1290:	11 24       	eor	r1, r1
    1292:	86 95       	lsr	r24
    1294:	86 95       	lsr	r24
    1296:	86 95       	lsr	r24
    1298:	88 0f       	add	r24, r24
    129a:	98 2f       	mov	r25, r24
    129c:	99 0f       	add	r25, r25
    129e:	99 0f       	add	r25, r25
    12a0:	89 0f       	add	r24, r25
    12a2:	c8 13       	cpse	r28, r24
    12a4:	e4 cf       	rjmp	.-56     	; 0x126e <task9func+0x12>
		{
			if(mutexTake(&mutex1 , 5000) == PASS)
    12a6:	08 e8       	ldi	r16, 0x88	; 136
    12a8:	13 e1       	ldi	r17, 0x13	; 19
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    12ae:	40 e0       	ldi	r20, 0x00	; 0
    12b0:	50 e0       	ldi	r21, 0x00	; 0
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	70 e0       	ldi	r23, 0x00	; 0
    12b6:	8d ea       	ldi	r24, 0xAD	; 173
    12b8:	96 e0       	ldi	r25, 0x06	; 6
    12ba:	0e 94 c5 01 	call	0x38a	; 0x38a <mutexTake>
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	b1 f6       	brne	.-84     	; 0x126e <task9func+0x12>
			{
				LCD_String("****Thread9*****");
    12c2:	8e ee       	ldi	r24, 0xEE	; 238
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_String>
				mutexRelease(&mutex1);
    12ca:	8d ea       	ldi	r24, 0xAD	; 173
    12cc:	96 e0       	ldi	r25, 0x06	; 6
    12ce:	0e 94 4e 02 	call	0x49c	; 0x49c <mutexRelease>
    12d2:	cd cf       	rjmp	.-102    	; 0x126e <task9func+0x12>

000012d4 <task10func>:
	}
}

void task10func(void )
{
	uint8_t flag = 0;
    12d4:	c0 e0       	ldi	r28, 0x00	; 0
    12d6:	0f 2e       	mov	r0, r31
    12d8:	f2 e3       	ldi	r31, 0x32	; 50
    12da:	cf 2e       	mov	r12, r31
    12dc:	d1 2c       	mov	r13, r1
    12de:	e1 2c       	mov	r14, r1
    12e0:	f1 2c       	mov	r15, r1
    12e2:	f0 2d       	mov	r31, r0
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
		flag++;
		
		if(flag%10 == 0)
    12e4:	dd ec       	ldi	r29, 0xCD	; 205
	}
}

void task10func(void )
{
	uint8_t flag = 0;
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	01 96       	adiw	r24, 0x01	; 1
	while(1)
	{
		for(k = 0 ; k < LOOP; k++);
    12ec:	82 33       	cpi	r24, 0x32	; 50
    12ee:	91 05       	cpc	r25, r1
    12f0:	e1 f7       	brne	.-8      	; 0x12ea <task10func+0x16>
    12f2:	c0 92 d5 02 	sts	0x02D5, r12	; 0x8002d5 <k>
    12f6:	d0 92 d6 02 	sts	0x02D6, r13	; 0x8002d6 <k+0x1>
    12fa:	e0 92 d7 02 	sts	0x02D7, r14	; 0x8002d7 <k+0x2>
    12fe:	f0 92 d8 02 	sts	0x02D8, r15	; 0x8002d8 <k+0x3>
		flag++;
    1302:	cf 5f       	subi	r28, 0xFF	; 255
		
		if(flag%10 == 0)
    1304:	cd 9f       	mul	r28, r29
    1306:	81 2d       	mov	r24, r1
    1308:	11 24       	eor	r1, r1
    130a:	86 95       	lsr	r24
    130c:	86 95       	lsr	r24
    130e:	86 95       	lsr	r24
    1310:	88 0f       	add	r24, r24
    1312:	98 2f       	mov	r25, r24
    1314:	99 0f       	add	r25, r25
    1316:	99 0f       	add	r25, r25
    1318:	89 0f       	add	r24, r25
    131a:	c8 13       	cpse	r28, r24
    131c:	e4 cf       	rjmp	.-56     	; 0x12e6 <task10func+0x12>
		{
			if(mutexTake(&mutex1 , 5000) == PASS)
    131e:	08 e8       	ldi	r16, 0x88	; 136
    1320:	13 e1       	ldi	r17, 0x13	; 19
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e0       	ldi	r20, 0x00	; 0
    1328:	50 e0       	ldi	r21, 0x00	; 0
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	70 e0       	ldi	r23, 0x00	; 0
    132e:	8d ea       	ldi	r24, 0xAD	; 173
    1330:	96 e0       	ldi	r25, 0x06	; 6
    1332:	0e 94 c5 01 	call	0x38a	; 0x38a <mutexTake>
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	b1 f6       	brne	.-84     	; 0x12e6 <task10func+0x12>
			{
				LCD_String("****Thread10****");
    133a:	8f ef       	ldi	r24, 0xFF	; 255
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <LCD_String>
				mutexRelease(&mutex1);
    1342:	8d ea       	ldi	r24, 0xAD	; 173
    1344:	96 e0       	ldi	r25, 0x06	; 6
    1346:	0e 94 4e 02 	call	0x49c	; 0x49c <mutexRelease>
    134a:	cd cf       	rjmp	.-102    	; 0x12e6 <task10func+0x12>

0000134c <main>:
	PORTA^=(1<<7);
}

int main(void)
{
   DDRA = 0xFF; 
    134c:	8f ef       	ldi	r24, 0xFF	; 255
    134e:	8a bb       	out	0x1a, r24	; 26
   LCD_Init();
    1350:	0e 94 c6 00 	call	0x18c	; 0x18c <LCD_Init>
   //
   //osInit() take an unsigned integer the number of miliseconds 
   //to call the OS scheduler , In this example 1ms 
   //
   osInit(1);
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	0e 94 88 02 	call	0x510	; 0x510 <osInit>
   //
   //create a mutex that allows only one task can access the shared Resource (LCD)
   //
   mutexCreate(&mutex1 , 1); 
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	8d ea       	ldi	r24, 0xAD	; 173
    135e:	96 e0       	ldi	r25, 0x06	; 6
    1360:	0e 94 4a 01 	call	0x294	; 0x294 <mutexCreate>
   ThreadCreate(task1func , &task1TCB , task1Stack , 1 );
    1364:	21 e0       	ldi	r18, 0x01	; 1
    1366:	49 eb       	ldi	r20, 0xB9	; 185
    1368:	55 e0       	ldi	r21, 0x05	; 5
    136a:	60 ee       	ldi	r22, 0xE0	; 224
    136c:	76 e0       	ldi	r23, 0x06	; 6
    136e:	8e e4       	ldi	r24, 0x4E	; 78
    1370:	97 e0       	ldi	r25, 0x07	; 7
    1372:	0e 94 55 04 	call	0x8aa	; 0x8aa <ThreadCreate>
   ThreadCreate(task2func , &task2TCB , task2Stack , 1);
    1376:	21 e0       	ldi	r18, 0x01	; 1
    1378:	43 e3       	ldi	r20, 0x33	; 51
    137a:	56 e0       	ldi	r21, 0x06	; 6
    137c:	6b ed       	ldi	r22, 0xDB	; 219
    137e:	74 e0       	ldi	r23, 0x04	; 4
    1380:	8a e8       	ldi	r24, 0x8A	; 138
    1382:	97 e0       	ldi	r25, 0x07	; 7
    1384:	0e 94 55 04 	call	0x8aa	; 0x8aa <ThreadCreate>
   ThreadCreate(task3func , &task3TCB , task3Stack , 1);
    1388:	21 e0       	ldi	r18, 0x01	; 1
    138a:	46 ef       	ldi	r20, 0xF6	; 246
    138c:	56 e0       	ldi	r21, 0x06	; 6
    138e:	69 ed       	ldi	r22, 0xD9	; 217
    1390:	72 e0       	ldi	r23, 0x02	; 2
    1392:	86 ec       	ldi	r24, 0xC6	; 198
    1394:	97 e0       	ldi	r25, 0x07	; 7
    1396:	0e 94 55 04 	call	0x8aa	; 0x8aa <ThreadCreate>
   ThreadCreate(task4func , &task4TCB , task4Stack , 1 );
    139a:	21 e0       	ldi	r18, 0x01	; 1
    139c:	43 e5       	ldi	r20, 0x53	; 83
    139e:	53 e0       	ldi	r21, 0x03	; 3
    13a0:	63 e8       	ldi	r22, 0x83	; 131
    13a2:	74 e0       	ldi	r23, 0x04	; 4
    13a4:	82 e0       	ldi	r24, 0x02	; 2
    13a6:	98 e0       	ldi	r25, 0x08	; 8
    13a8:	0e 94 55 04 	call	0x8aa	; 0x8aa <ThreadCreate>
   ThreadCreate(task5func , &task5TCB , task5Stack , 1);
    13ac:	21 e0       	ldi	r18, 0x01	; 1
    13ae:	4f ee       	ldi	r20, 0xEF	; 239
    13b0:	52 e0       	ldi	r21, 0x02	; 2
    13b2:	65 ec       	ldi	r22, 0xC5	; 197
    13b4:	74 e0       	ldi	r23, 0x04	; 4
    13b6:	8e e3       	ldi	r24, 0x3E	; 62
    13b8:	98 e0       	ldi	r25, 0x08	; 8
    13ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <ThreadCreate>
   ThreadCreate(task6func , &task6TCB , task6Stack , 1);
    13be:	21 e0       	ldi	r18, 0x01	; 1
    13c0:	4f e1       	ldi	r20, 0x1F	; 31
    13c2:	54 e0       	ldi	r21, 0x04	; 4
    13c4:	67 e9       	ldi	r22, 0x97	; 151
    13c6:	76 e0       	ldi	r23, 0x06	; 6
    13c8:	8a e7       	ldi	r24, 0x7A	; 122
    13ca:	98 e0       	ldi	r25, 0x08	; 8
    13cc:	0e 94 55 04 	call	0x8aa	; 0x8aa <ThreadCreate>
   ThreadCreate(task7func , &task7TCB , task7Stack , 1);
    13d0:	21 e0       	ldi	r18, 0x01	; 1
    13d2:	41 ef       	ldi	r20, 0xF1	; 241
    13d4:	54 e0       	ldi	r21, 0x04	; 4
    13d6:	6b eb       	ldi	r22, 0xBB	; 187
    13d8:	72 e0       	ldi	r23, 0x02	; 2
    13da:	86 eb       	ldi	r24, 0xB6	; 182
    13dc:	98 e0       	ldi	r25, 0x08	; 8
    13de:	0e 94 55 04 	call	0x8aa	; 0x8aa <ThreadCreate>
   ThreadCreate(task8func , &task8TCB , task8Stack , 1 );
    13e2:	21 e0       	ldi	r18, 0x01	; 1
    13e4:	4b eb       	ldi	r20, 0xBB	; 187
    13e6:	53 e0       	ldi	r21, 0x03	; 3
    13e8:	69 e9       	ldi	r22, 0x99	; 153
    13ea:	74 e0       	ldi	r23, 0x04	; 4
    13ec:	82 ef       	ldi	r24, 0xF2	; 242
    13ee:	98 e0       	ldi	r25, 0x08	; 8
    13f0:	0e 94 55 04 	call	0x8aa	; 0x8aa <ThreadCreate>
   ThreadCreate(task9func , &task9TCB , task9Stack , 1);
    13f4:	21 e0       	ldi	r18, 0x01	; 1
    13f6:	4a e5       	ldi	r20, 0x5A	; 90
    13f8:	57 e0       	ldi	r21, 0x07	; 7
    13fa:	6f ea       	ldi	r22, 0xAF	; 175
    13fc:	74 e0       	ldi	r23, 0x04	; 4
    13fe:	8e e2       	ldi	r24, 0x2E	; 46
    1400:	99 e0       	ldi	r25, 0x09	; 9
    1402:	0e 94 55 04 	call	0x8aa	; 0x8aa <ThreadCreate>
   ThreadCreate(task10func , &task10TCB , task10Stack , 1);
    1406:	21 e0       	ldi	r18, 0x01	; 1
    1408:	45 e5       	ldi	r20, 0x55	; 85
    140a:	55 e0       	ldi	r21, 0x05	; 5
    140c:	6d e1       	ldi	r22, 0x1D	; 29
    140e:	76 e0       	ldi	r23, 0x06	; 6
    1410:	8a e6       	ldi	r24, 0x6A	; 106
    1412:	99 e0       	ldi	r25, 0x09	; 9
    1414:	0e 94 55 04 	call	0x8aa	; 0x8aa <ThreadCreate>
   
   CreateSoftwareTimer(ledToggle , 500 , CIRCULAR );
    1418:	ee 24       	eor	r14, r14
    141a:	e3 94       	inc	r14
    141c:	04 ef       	ldi	r16, 0xF4	; 244
    141e:	11 e0       	ldi	r17, 0x01	; 1
    1420:	20 e0       	ldi	r18, 0x00	; 0
    1422:	30 e0       	ldi	r19, 0x00	; 0
    1424:	40 e0       	ldi	r20, 0x00	; 0
    1426:	50 e0       	ldi	r21, 0x00	; 0
    1428:	60 e0       	ldi	r22, 0x00	; 0
    142a:	70 e0       	ldi	r23, 0x00	; 0
    142c:	8b e3       	ldi	r24, 0x3B	; 59
    142e:	97 e0       	ldi	r25, 0x07	; 7
    1430:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <CreateSoftwareTimer>
   CreateSoftwareTimer(ledToggle2, 500, CIRCULAR );
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	40 e0       	ldi	r20, 0x00	; 0
    143a:	50 e0       	ldi	r21, 0x00	; 0
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	70 e0       	ldi	r23, 0x00	; 0
    1440:	80 e4       	ldi	r24, 0x40	; 64
    1442:	97 e0       	ldi	r25, 0x07	; 7
    1444:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <CreateSoftwareTimer>
   CreateSoftwareTimer(ledToggle3 , 500 , CIRCULAR);
    1448:	20 e0       	ldi	r18, 0x00	; 0
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	50 e0       	ldi	r21, 0x00	; 0
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	85 e4       	ldi	r24, 0x45	; 69
    1456:	97 e0       	ldi	r25, 0x07	; 7
    1458:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <CreateSoftwareTimer>
   CreateSoftwareTimer(ledToggle4 , 500 , CIRCULAR );
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	8a e4       	ldi	r24, 0x4A	; 74
    146a:	97 e0       	ldi	r25, 0x07	; 7
    146c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <CreateSoftwareTimer>
   
   startScheduler();
    1470:	0e 94 49 00 	call	0x92	; 0x92 <startScheduler>
    1474:	ff cf       	rjmp	.-2      	; 0x1474 <main+0x128>

00001476 <timer0Init>:
{
	/*
	 *Clock prescaler 1024 ~= 1000
	 *clear timer on comapre match
	 */
	TCCR0 &=~(0xFF);
    1476:	93 b7       	in	r25, 0x33	; 51
    1478:	13 be       	out	0x33, r1	; 51
	TCCR0|= 0xD; 
    147a:	93 b7       	in	r25, 0x33	; 51
    147c:	9d 60       	ori	r25, 0x0D	; 13
    147e:	93 bf       	out	0x33, r25	; 51
	//*************set wait time********
	//if less than 31 ms , then acceptable 
	//if greater than 31 , then set it to maximum
	//******************************
	// 
	if(ms <= 31 )
    1480:	80 32       	cpi	r24, 0x20	; 32
    1482:	38 f4       	brcc	.+14     	; 0x1492 <timer0Init+0x1c>
	//OCR0 = 2;
	OCR0 = ms*(TimerClk / 1000);
    1484:	98 2f       	mov	r25, r24
    1486:	99 0f       	add	r25, r25
    1488:	99 0f       	add	r25, r25
    148a:	99 0f       	add	r25, r25
    148c:	98 1b       	sub	r25, r24
    148e:	9c bf       	out	0x3c, r25	; 60
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <timer0Init+0x20>
	else 
	OCR0 = 31;
    1492:	8f e1       	ldi	r24, 0x1F	; 31
    1494:	8c bf       	out	0x3c, r24	; 60
	
	//
	//Enable clear timer on capture match interrupt
	//
	TIMSK |=(1<<1);
    1496:	89 b7       	in	r24, 0x39	; 57
    1498:	82 60       	ori	r24, 0x02	; 2
    149a:	89 bf       	out	0x39, r24	; 57
    149c:	08 95       	ret

0000149e <__vector_10>:
}


ISR(TIMER0_COMP_vect ,  ISR_NAKED)
{
	asm("push r0");
    149e:	0f 92       	push	r0
	asm("in r0 , 0x3f");
    14a0:	0f b6       	in	r0, 0x3f	; 63
	asm("push r0");
    14a2:	0f 92       	push	r0
	asm("push r1");
    14a4:	1f 92       	push	r1
	asm("push r2");
    14a6:	2f 92       	push	r2
	asm("push r3");
    14a8:	3f 92       	push	r3
	asm("push r4");
    14aa:	4f 92       	push	r4
	asm("push r5");
    14ac:	5f 92       	push	r5
	asm("push r6");
    14ae:	6f 92       	push	r6
	asm("push r7");
    14b0:	7f 92       	push	r7
	asm("push r8");
    14b2:	8f 92       	push	r8
	asm("push r9");
    14b4:	9f 92       	push	r9
	asm("push r10");
    14b6:	af 92       	push	r10
	asm("push r11");
    14b8:	bf 92       	push	r11
	asm("push r12");
    14ba:	cf 92       	push	r12
	asm("push r13");
    14bc:	df 92       	push	r13
	asm("push r14");
    14be:	ef 92       	push	r14
	asm("push r15");
    14c0:	ff 92       	push	r15
	asm("push r16");
    14c2:	0f 93       	push	r16
	asm("push r17");
    14c4:	1f 93       	push	r17
	asm("push r18");
    14c6:	2f 93       	push	r18
	asm("push r19");			
    14c8:	3f 93       	push	r19
	asm("push r20");
    14ca:	4f 93       	push	r20
	asm("push r21");
    14cc:	5f 93       	push	r21
	asm("push r22");
    14ce:	6f 93       	push	r22
	asm("push r23");				
    14d0:	7f 93       	push	r23
	asm("push r24");
    14d2:	8f 93       	push	r24
	asm("push r25");
    14d4:	9f 93       	push	r25
	asm("push r26");
    14d6:	af 93       	push	r26
	asm("push r27");					
    14d8:	bf 93       	push	r27
	asm("push r28");
    14da:	cf 93       	push	r28
	asm("push r29");
    14dc:	df 93       	push	r29
	asm("push r30");
    14de:	ef 93       	push	r30
	asm("push r31");
    14e0:	ff 93       	push	r31
	asm("call getRunning");
    14e2:	0e 94 86 04 	call	0x90c	; 0x90c <getRunning>
	asm("mov XL , r24");
    14e6:	a8 2f       	mov	r26, r24
	asm("mov XH , r25");				
    14e8:	b9 2f       	mov	r27, r25
	asm("in r0 , 0x3d");
    14ea:	0d b6       	in	r0, 0x3d	; 61
	asm("in r1 , 0x3e");
    14ec:	1e b6       	in	r1, 0x3e	; 62
	asm("st X+ , r0");
    14ee:	0d 92       	st	X+, r0
	asm("st X , r1");
    14f0:	1c 92       	st	X, r1
	
	
	asm("call refreshTimerList");
    14f2:	0e 94 67 06 	call	0xcce	; 0xcce <refreshTimerList>
	
	#if INCLUDE_SOFTWARETIMER == 1

	runSoftwareTimers();
    14f6:	0e 94 99 03 	call	0x732	; 0x732 <runSoftwareTimers>
	//;
	//;
	//;
	//;
	//;;Now , load Next context;;
	asm("ldi r16 , 0");
    14fa:	00 e0       	ldi	r16, 0x00	; 0
	asm("mov r1 , r16");
    14fc:	10 2e       	mov	r1, r16
	asm("call getNext");				
    14fe:	0e 94 8d 04 	call	0x91a	; 0x91a <getNext>
	asm("mov XL , r24");
    1502:	a8 2f       	mov	r26, r24
	asm("mov XH , r25");
    1504:	b9 2f       	mov	r27, r25
	asm("ld r0 , X+");
    1506:	0d 90       	ld	r0, X+
	asm("ld r1 , X");
    1508:	1c 90       	ld	r1, X
	asm("out 0x3d, r0");
    150a:	0d be       	out	0x3d, r0	; 61
	asm("out	0x3e , r1");
    150c:	1e be       	out	0x3e, r1	; 62
	asm("nop");
    150e:	00 00       	nop
	asm("pop r31");
    1510:	ff 91       	pop	r31
	asm("pop r30");
    1512:	ef 91       	pop	r30
	asm("pop r29");
    1514:	df 91       	pop	r29
	asm("pop r28");
    1516:	cf 91       	pop	r28
	asm("pop r27");
    1518:	bf 91       	pop	r27
	asm("pop r26");
    151a:	af 91       	pop	r26
	asm("pop r25");
    151c:	9f 91       	pop	r25
	asm("pop r24");
    151e:	8f 91       	pop	r24
	asm("pop r23");
    1520:	7f 91       	pop	r23
	asm("pop r22");
    1522:	6f 91       	pop	r22
	asm("pop r21");
    1524:	5f 91       	pop	r21
	asm("pop r20");
    1526:	4f 91       	pop	r20
	asm("pop r19");
    1528:	3f 91       	pop	r19
	asm("pop r18");
    152a:	2f 91       	pop	r18
	asm("pop r17");
    152c:	1f 91       	pop	r17
	asm("pop r16");
    152e:	0f 91       	pop	r16
	asm("pop r15");
    1530:	ff 90       	pop	r15
	asm("pop r14");
    1532:	ef 90       	pop	r14
	asm("pop r13");
    1534:	df 90       	pop	r13
	asm("pop r12");
    1536:	cf 90       	pop	r12
	asm("pop r11");
    1538:	bf 90       	pop	r11
	asm("pop r10");
    153a:	af 90       	pop	r10
	asm("pop r9");
    153c:	9f 90       	pop	r9
	asm("pop r8");
    153e:	8f 90       	pop	r8
	asm("pop r7");
    1540:	7f 90       	pop	r7
	asm("pop r6");
    1542:	6f 90       	pop	r6
	asm("pop r5");
    1544:	5f 90       	pop	r5
	asm("pop r4");
    1546:	4f 90       	pop	r4
	asm("pop r3");
    1548:	3f 90       	pop	r3
	asm("pop r2");
    154a:	2f 90       	pop	r2
	asm("pop r1");
    154c:	1f 90       	pop	r1
	asm("pop r0");
    154e:	0f 90       	pop	r0
	asm("out 0x3f , r0");
    1550:	0f be       	out	0x3f, r0	; 63
	asm("pop r0");
    1552:	0f 90       	pop	r0
	asm("reti");
    1554:	18 95       	reti

00001556 <__adddi3>:
    1556:	2a 0d       	add	r18, r10
    1558:	3b 1d       	adc	r19, r11
    155a:	4c 1d       	adc	r20, r12
    155c:	5d 1d       	adc	r21, r13
    155e:	6e 1d       	adc	r22, r14
    1560:	7f 1d       	adc	r23, r15
    1562:	80 1f       	adc	r24, r16
    1564:	91 1f       	adc	r25, r17
    1566:	08 95       	ret

00001568 <__adddi3_s8>:
    1568:	00 24       	eor	r0, r0
    156a:	a7 fd       	sbrc	r26, 7
    156c:	00 94       	com	r0
    156e:	2a 0f       	add	r18, r26
    1570:	30 1d       	adc	r19, r0
    1572:	40 1d       	adc	r20, r0
    1574:	50 1d       	adc	r21, r0
    1576:	60 1d       	adc	r22, r0
    1578:	70 1d       	adc	r23, r0
    157a:	80 1d       	adc	r24, r0
    157c:	90 1d       	adc	r25, r0
    157e:	08 95       	ret

00001580 <__cmpdi2>:
    1580:	2a 15       	cp	r18, r10
    1582:	3b 05       	cpc	r19, r11
    1584:	4c 05       	cpc	r20, r12
    1586:	5d 05       	cpc	r21, r13
    1588:	6e 05       	cpc	r22, r14
    158a:	7f 05       	cpc	r23, r15
    158c:	80 07       	cpc	r24, r16
    158e:	91 07       	cpc	r25, r17
    1590:	08 95       	ret

00001592 <malloc>:
    1592:	0f 93       	push	r16
    1594:	1f 93       	push	r17
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29
    159a:	82 30       	cpi	r24, 0x02	; 2
    159c:	91 05       	cpc	r25, r1
    159e:	10 f4       	brcc	.+4      	; 0x15a4 <malloc+0x12>
    15a0:	82 e0       	ldi	r24, 0x02	; 2
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	e0 91 c0 07 	lds	r30, 0x07C0	; 0x8007c0 <__flp>
    15a8:	f0 91 c1 07 	lds	r31, 0x07C1	; 0x8007c1 <__flp+0x1>
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	a0 e0       	ldi	r26, 0x00	; 0
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	30 97       	sbiw	r30, 0x00	; 0
    15b6:	19 f1       	breq	.+70     	; 0x15fe <malloc+0x6c>
    15b8:	40 81       	ld	r20, Z
    15ba:	51 81       	ldd	r21, Z+1	; 0x01
    15bc:	02 81       	ldd	r16, Z+2	; 0x02
    15be:	13 81       	ldd	r17, Z+3	; 0x03
    15c0:	48 17       	cp	r20, r24
    15c2:	59 07       	cpc	r21, r25
    15c4:	c8 f0       	brcs	.+50     	; 0x15f8 <malloc+0x66>
    15c6:	84 17       	cp	r24, r20
    15c8:	95 07       	cpc	r25, r21
    15ca:	69 f4       	brne	.+26     	; 0x15e6 <malloc+0x54>
    15cc:	10 97       	sbiw	r26, 0x00	; 0
    15ce:	31 f0       	breq	.+12     	; 0x15dc <malloc+0x4a>
    15d0:	12 96       	adiw	r26, 0x02	; 2
    15d2:	0c 93       	st	X, r16
    15d4:	12 97       	sbiw	r26, 0x02	; 2
    15d6:	13 96       	adiw	r26, 0x03	; 3
    15d8:	1c 93       	st	X, r17
    15da:	27 c0       	rjmp	.+78     	; 0x162a <malloc+0x98>
    15dc:	00 93 c0 07 	sts	0x07C0, r16	; 0x8007c0 <__flp>
    15e0:	10 93 c1 07 	sts	0x07C1, r17	; 0x8007c1 <__flp+0x1>
    15e4:	22 c0       	rjmp	.+68     	; 0x162a <malloc+0x98>
    15e6:	21 15       	cp	r18, r1
    15e8:	31 05       	cpc	r19, r1
    15ea:	19 f0       	breq	.+6      	; 0x15f2 <malloc+0x60>
    15ec:	42 17       	cp	r20, r18
    15ee:	53 07       	cpc	r21, r19
    15f0:	18 f4       	brcc	.+6      	; 0x15f8 <malloc+0x66>
    15f2:	9a 01       	movw	r18, r20
    15f4:	bd 01       	movw	r22, r26
    15f6:	ef 01       	movw	r28, r30
    15f8:	df 01       	movw	r26, r30
    15fa:	f8 01       	movw	r30, r16
    15fc:	db cf       	rjmp	.-74     	; 0x15b4 <malloc+0x22>
    15fe:	21 15       	cp	r18, r1
    1600:	31 05       	cpc	r19, r1
    1602:	f9 f0       	breq	.+62     	; 0x1642 <malloc+0xb0>
    1604:	28 1b       	sub	r18, r24
    1606:	39 0b       	sbc	r19, r25
    1608:	24 30       	cpi	r18, 0x04	; 4
    160a:	31 05       	cpc	r19, r1
    160c:	80 f4       	brcc	.+32     	; 0x162e <malloc+0x9c>
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	9b 81       	ldd	r25, Y+3	; 0x03
    1612:	61 15       	cp	r22, r1
    1614:	71 05       	cpc	r23, r1
    1616:	21 f0       	breq	.+8      	; 0x1620 <malloc+0x8e>
    1618:	fb 01       	movw	r30, r22
    161a:	93 83       	std	Z+3, r25	; 0x03
    161c:	82 83       	std	Z+2, r24	; 0x02
    161e:	04 c0       	rjmp	.+8      	; 0x1628 <malloc+0x96>
    1620:	90 93 c1 07 	sts	0x07C1, r25	; 0x8007c1 <__flp+0x1>
    1624:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <__flp>
    1628:	fe 01       	movw	r30, r28
    162a:	32 96       	adiw	r30, 0x02	; 2
    162c:	44 c0       	rjmp	.+136    	; 0x16b6 <malloc+0x124>
    162e:	fe 01       	movw	r30, r28
    1630:	e2 0f       	add	r30, r18
    1632:	f3 1f       	adc	r31, r19
    1634:	81 93       	st	Z+, r24
    1636:	91 93       	st	Z+, r25
    1638:	22 50       	subi	r18, 0x02	; 2
    163a:	31 09       	sbc	r19, r1
    163c:	39 83       	std	Y+1, r19	; 0x01
    163e:	28 83       	st	Y, r18
    1640:	3a c0       	rjmp	.+116    	; 0x16b6 <malloc+0x124>
    1642:	20 91 be 07 	lds	r18, 0x07BE	; 0x8007be <__brkval>
    1646:	30 91 bf 07 	lds	r19, 0x07BF	; 0x8007bf <__brkval+0x1>
    164a:	23 2b       	or	r18, r19
    164c:	41 f4       	brne	.+16     	; 0x165e <malloc+0xcc>
    164e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__malloc_heap_start>
    1652:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__malloc_heap_start+0x1>
    1656:	30 93 bf 07 	sts	0x07BF, r19	; 0x8007bf <__brkval+0x1>
    165a:	20 93 be 07 	sts	0x07BE, r18	; 0x8007be <__brkval>
    165e:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
    1662:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
    1666:	21 15       	cp	r18, r1
    1668:	31 05       	cpc	r19, r1
    166a:	41 f4       	brne	.+16     	; 0x167c <malloc+0xea>
    166c:	2d b7       	in	r18, 0x3d	; 61
    166e:	3e b7       	in	r19, 0x3e	; 62
    1670:	40 91 64 00 	lds	r20, 0x0064	; 0x800064 <__malloc_margin>
    1674:	50 91 65 00 	lds	r21, 0x0065	; 0x800065 <__malloc_margin+0x1>
    1678:	24 1b       	sub	r18, r20
    167a:	35 0b       	sbc	r19, r21
    167c:	e0 91 be 07 	lds	r30, 0x07BE	; 0x8007be <__brkval>
    1680:	f0 91 bf 07 	lds	r31, 0x07BF	; 0x8007bf <__brkval+0x1>
    1684:	e2 17       	cp	r30, r18
    1686:	f3 07       	cpc	r31, r19
    1688:	a0 f4       	brcc	.+40     	; 0x16b2 <malloc+0x120>
    168a:	2e 1b       	sub	r18, r30
    168c:	3f 0b       	sbc	r19, r31
    168e:	28 17       	cp	r18, r24
    1690:	39 07       	cpc	r19, r25
    1692:	78 f0       	brcs	.+30     	; 0x16b2 <malloc+0x120>
    1694:	ac 01       	movw	r20, r24
    1696:	4e 5f       	subi	r20, 0xFE	; 254
    1698:	5f 4f       	sbci	r21, 0xFF	; 255
    169a:	24 17       	cp	r18, r20
    169c:	35 07       	cpc	r19, r21
    169e:	48 f0       	brcs	.+18     	; 0x16b2 <malloc+0x120>
    16a0:	4e 0f       	add	r20, r30
    16a2:	5f 1f       	adc	r21, r31
    16a4:	50 93 bf 07 	sts	0x07BF, r21	; 0x8007bf <__brkval+0x1>
    16a8:	40 93 be 07 	sts	0x07BE, r20	; 0x8007be <__brkval>
    16ac:	81 93       	st	Z+, r24
    16ae:	91 93       	st	Z+, r25
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <malloc+0x124>
    16b2:	e0 e0       	ldi	r30, 0x00	; 0
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	cf 01       	movw	r24, r30
    16b8:	df 91       	pop	r29
    16ba:	cf 91       	pop	r28
    16bc:	1f 91       	pop	r17
    16be:	0f 91       	pop	r16
    16c0:	08 95       	ret

000016c2 <free>:
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	09 f4       	brne	.+2      	; 0x16cc <free+0xa>
    16ca:	81 c0       	rjmp	.+258    	; 0x17ce <free+0x10c>
    16cc:	fc 01       	movw	r30, r24
    16ce:	32 97       	sbiw	r30, 0x02	; 2
    16d0:	13 82       	std	Z+3, r1	; 0x03
    16d2:	12 82       	std	Z+2, r1	; 0x02
    16d4:	a0 91 c0 07 	lds	r26, 0x07C0	; 0x8007c0 <__flp>
    16d8:	b0 91 c1 07 	lds	r27, 0x07C1	; 0x8007c1 <__flp+0x1>
    16dc:	10 97       	sbiw	r26, 0x00	; 0
    16de:	81 f4       	brne	.+32     	; 0x1700 <free+0x3e>
    16e0:	20 81       	ld	r18, Z
    16e2:	31 81       	ldd	r19, Z+1	; 0x01
    16e4:	82 0f       	add	r24, r18
    16e6:	93 1f       	adc	r25, r19
    16e8:	20 91 be 07 	lds	r18, 0x07BE	; 0x8007be <__brkval>
    16ec:	30 91 bf 07 	lds	r19, 0x07BF	; 0x8007bf <__brkval+0x1>
    16f0:	28 17       	cp	r18, r24
    16f2:	39 07       	cpc	r19, r25
    16f4:	51 f5       	brne	.+84     	; 0x174a <free+0x88>
    16f6:	f0 93 bf 07 	sts	0x07BF, r31	; 0x8007bf <__brkval+0x1>
    16fa:	e0 93 be 07 	sts	0x07BE, r30	; 0x8007be <__brkval>
    16fe:	67 c0       	rjmp	.+206    	; 0x17ce <free+0x10c>
    1700:	ed 01       	movw	r28, r26
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	ce 17       	cp	r28, r30
    1708:	df 07       	cpc	r29, r31
    170a:	40 f4       	brcc	.+16     	; 0x171c <free+0x5a>
    170c:	4a 81       	ldd	r20, Y+2	; 0x02
    170e:	5b 81       	ldd	r21, Y+3	; 0x03
    1710:	9e 01       	movw	r18, r28
    1712:	41 15       	cp	r20, r1
    1714:	51 05       	cpc	r21, r1
    1716:	f1 f0       	breq	.+60     	; 0x1754 <free+0x92>
    1718:	ea 01       	movw	r28, r20
    171a:	f5 cf       	rjmp	.-22     	; 0x1706 <free+0x44>
    171c:	d3 83       	std	Z+3, r29	; 0x03
    171e:	c2 83       	std	Z+2, r28	; 0x02
    1720:	40 81       	ld	r20, Z
    1722:	51 81       	ldd	r21, Z+1	; 0x01
    1724:	84 0f       	add	r24, r20
    1726:	95 1f       	adc	r25, r21
    1728:	c8 17       	cp	r28, r24
    172a:	d9 07       	cpc	r29, r25
    172c:	59 f4       	brne	.+22     	; 0x1744 <free+0x82>
    172e:	88 81       	ld	r24, Y
    1730:	99 81       	ldd	r25, Y+1	; 0x01
    1732:	84 0f       	add	r24, r20
    1734:	95 1f       	adc	r25, r21
    1736:	02 96       	adiw	r24, 0x02	; 2
    1738:	91 83       	std	Z+1, r25	; 0x01
    173a:	80 83       	st	Z, r24
    173c:	8a 81       	ldd	r24, Y+2	; 0x02
    173e:	9b 81       	ldd	r25, Y+3	; 0x03
    1740:	93 83       	std	Z+3, r25	; 0x03
    1742:	82 83       	std	Z+2, r24	; 0x02
    1744:	21 15       	cp	r18, r1
    1746:	31 05       	cpc	r19, r1
    1748:	29 f4       	brne	.+10     	; 0x1754 <free+0x92>
    174a:	f0 93 c1 07 	sts	0x07C1, r31	; 0x8007c1 <__flp+0x1>
    174e:	e0 93 c0 07 	sts	0x07C0, r30	; 0x8007c0 <__flp>
    1752:	3d c0       	rjmp	.+122    	; 0x17ce <free+0x10c>
    1754:	e9 01       	movw	r28, r18
    1756:	fb 83       	std	Y+3, r31	; 0x03
    1758:	ea 83       	std	Y+2, r30	; 0x02
    175a:	49 91       	ld	r20, Y+
    175c:	59 91       	ld	r21, Y+
    175e:	c4 0f       	add	r28, r20
    1760:	d5 1f       	adc	r29, r21
    1762:	ec 17       	cp	r30, r28
    1764:	fd 07       	cpc	r31, r29
    1766:	61 f4       	brne	.+24     	; 0x1780 <free+0xbe>
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	84 0f       	add	r24, r20
    176e:	95 1f       	adc	r25, r21
    1770:	02 96       	adiw	r24, 0x02	; 2
    1772:	e9 01       	movw	r28, r18
    1774:	99 83       	std	Y+1, r25	; 0x01
    1776:	88 83       	st	Y, r24
    1778:	82 81       	ldd	r24, Z+2	; 0x02
    177a:	93 81       	ldd	r25, Z+3	; 0x03
    177c:	9b 83       	std	Y+3, r25	; 0x03
    177e:	8a 83       	std	Y+2, r24	; 0x02
    1780:	e0 e0       	ldi	r30, 0x00	; 0
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	12 96       	adiw	r26, 0x02	; 2
    1786:	8d 91       	ld	r24, X+
    1788:	9c 91       	ld	r25, X
    178a:	13 97       	sbiw	r26, 0x03	; 3
    178c:	00 97       	sbiw	r24, 0x00	; 0
    178e:	19 f0       	breq	.+6      	; 0x1796 <free+0xd4>
    1790:	fd 01       	movw	r30, r26
    1792:	dc 01       	movw	r26, r24
    1794:	f7 cf       	rjmp	.-18     	; 0x1784 <free+0xc2>
    1796:	8d 91       	ld	r24, X+
    1798:	9c 91       	ld	r25, X
    179a:	11 97       	sbiw	r26, 0x01	; 1
    179c:	9d 01       	movw	r18, r26
    179e:	2e 5f       	subi	r18, 0xFE	; 254
    17a0:	3f 4f       	sbci	r19, 0xFF	; 255
    17a2:	82 0f       	add	r24, r18
    17a4:	93 1f       	adc	r25, r19
    17a6:	20 91 be 07 	lds	r18, 0x07BE	; 0x8007be <__brkval>
    17aa:	30 91 bf 07 	lds	r19, 0x07BF	; 0x8007bf <__brkval+0x1>
    17ae:	28 17       	cp	r18, r24
    17b0:	39 07       	cpc	r19, r25
    17b2:	69 f4       	brne	.+26     	; 0x17ce <free+0x10c>
    17b4:	30 97       	sbiw	r30, 0x00	; 0
    17b6:	29 f4       	brne	.+10     	; 0x17c2 <free+0x100>
    17b8:	10 92 c1 07 	sts	0x07C1, r1	; 0x8007c1 <__flp+0x1>
    17bc:	10 92 c0 07 	sts	0x07C0, r1	; 0x8007c0 <__flp>
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <free+0x104>
    17c2:	13 82       	std	Z+3, r1	; 0x03
    17c4:	12 82       	std	Z+2, r1	; 0x02
    17c6:	b0 93 bf 07 	sts	0x07BF, r27	; 0x8007bf <__brkval+0x1>
    17ca:	a0 93 be 07 	sts	0x07BE, r26	; 0x8007be <__brkval>
    17ce:	df 91       	pop	r29
    17d0:	cf 91       	pop	r28
    17d2:	08 95       	ret

000017d4 <_exit>:
    17d4:	f8 94       	cli

000017d6 <__stop_program>:
    17d6:	ff cf       	rjmp	.-2      	; 0x17d6 <__stop_program>
